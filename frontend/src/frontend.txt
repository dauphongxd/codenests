This file is a merged representation of a subset of the codebase, containing files not matching ignore patterns, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching these patterns are excluded: grain.png,  vite-env.d.ts,  assets/react.svg
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)

Additional Info:
----------------

================================================================
Directory Structure
================================================================
App.css
App.tsx
assets/react.svg
components/Modal.jsx
components/Navbar.jsx
contexts/AuthContext.jsx
index.css
main.tsx
pages/ConversationPage.jsx
pages/CreateGroupPage.jsx
pages/CreateSnippetPage.jsx
pages/DashboardPage.jsx
pages/GroupDetailPage.jsx
pages/GroupsListPage.jsx
pages/HomePage.jsx
pages/LatestSnippetsPage.jsx
pages/LoginPage.jsx
pages/MessagesPage.jsx
pages/NewMessagePage.jsx
pages/ProfilePage.jsx
pages/RegisterPage.jsx
pages/ViewSnippetPage.jsx
services/api.js
vite-env.d.ts

================================================================
Files
================================================================

================
File: App.css
================
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}

================
File: App.tsx
================
import { BrowserRouter, Routes, Route } from "react-router-dom";
import { AuthProvider } from "./contexts/AuthContext";
import { ThemeProvider, createTheme, CssBaseline } from '@mui/material';
import Navbar from "./components/Navbar";
import HomePage from "./pages/HomePage";
import CreateSnippetPage from "./pages/CreateSnippetPage";
import LoginPage from "./pages/LoginPage";
import RegisterPage from "./pages/RegisterPage";
import ViewSnippetPage from "./pages/ViewSnippetPage";
import LatestSnippetsPage from "./pages/LatestSnippetsPage";
import GroupsListPage from "./pages/GroupsListPage";
import CreateGroupPage from "./pages/CreateGroupPage";
import GroupDetailPage from "./pages/GroupDetailPage";
import MessagesPage from "./pages/MessagesPage"; // Renamed to avoid conflicts
import ConversationPage from "./pages/ConversationPage"; // Renamed to avoid conflicts
import NewMessagePage from "./pages/NewMessagePage";
import DashboardPage from "./pages/DashboardPage";
import ProfilePage from "./pages/ProfilePage";
import React, { ReactNode } from 'react'; // Import ReactNode type

// Create a dark theme that matches the existing website colors
const darkTheme = createTheme({
    palette: {
        mode: 'dark',
        primary: {
            main: '#673CE3', // Purple from your existing theme
        },
        secondary: {
            main: '#BCA4F5', // Light purple from your theme
        },
        background: {
            default: '#0D0D11', // Dark background from your theme
            paper: '#16151C',   // Dark card background from your theme
        },
        text: {
            primary: '#ffffff',
            secondary: '#9C95AC', // Gray text color from your theme
        },
        divider: 'rgba(188, 156, 255, 0.1)', // Border color from your theme
    },
    typography: {
        fontFamily: 'system-ui, -apple-system, sans-serif',
    },
    components: {
        MuiButton: {
            styleOverrides: {
                root: {
                    textTransform: 'none',
                    boxShadow: 'none',
                    '&:hover': {
                        boxShadow: 'none',
                    },
                },
                contained: {
                    boxShadow: 'inset 0px 2px 1px -1px rgba(255, 255, 255, 0.12), inset 0px 0px 0px 1px rgba(255, 255, 255, 0.05)',
                },
            },
        },
        MuiPaper: {
            styleOverrides: {
                root: {
                    backgroundImage: 'none',
                },
            },
        },
    },
});

// Define props interface for Layout component
interface LayoutProps {
    children: ReactNode;
}

// Create a Layout component that will be used across all routes
const Layout: React.FC<LayoutProps> = ({ children }) => {
    return (
        <div className="grain" style={{
            minHeight: '100vh',
            position: 'relative',
            // Remove overflow: hidden
        }}>
            {/*
                Positioned container for glow effects -
                This container uses absolute positioning but has a fixed height/width
                to prevent it from affecting the document flow
            */}
            <div style={{
                position: 'absolute',
                top: 0,
                left: 0,
                right: 0,
                bottom: 0,
                overflow: 'hidden',
                pointerEvents: 'none',
                zIndex: 0
            }}>
                {/* Purple gradient effects with proper z-index */}
                <div className="purple-glow" style={{
                    position: 'absolute',
                    width: '40rem',
                    height: '10rem',
                    borderRadius: '50%',
                    filter: 'blur(100px)',
                    backgroundColor: 'rgba(111, 50, 240, 0.25)',
                    left: '50%',
                    transform: 'translateX(-50%)',
                    top: '-48px',
                    zIndex: -5,
                    pointerEvents: 'none'
                }}></div>

                <div className="purple-glow-bottom" style={{
                    position: 'absolute',
                    width: '40rem',
                    height: '10rem',
                    borderRadius: '50%',
                    filter: 'blur(200px)',
                    backgroundColor: 'rgba(111, 50, 240, 1)',
                    left: '50%',
                    transform: 'translateX(-50%)',
                    bottom: '-24rem',
                    zIndex: -5,
                    pointerEvents: 'none'
                }}></div>
            </div>

            <Navbar />
            {/* Main content with proper z-index */}
            <main style={{ position: 'relative', zIndex: 5 }}>
                {children}
            </main>
        </div>
    );
};

function App() {
    return (
        <ThemeProvider theme={darkTheme}>
            <CssBaseline />
            <AuthProvider>
                <BrowserRouter>
                    <Layout>
                        <Routes>
                            <Route path="/" element={<HomePage />} />
                            <Route path="/messages/conversation/:userId" element={<ConversationPage />} />
                            <Route path="/code/new" element={<CreateSnippetPage />} />
                            <Route path="/code/latest" element={<LatestSnippetsPage />} />
                            <Route path="/code/:uuid" element={<ViewSnippetPage />} />
                            <Route path="/login" element={<LoginPage />} />
                            <Route path="/register" element={<RegisterPage />} />
                            <Route path="/groups" element={<GroupsListPage />} />
                            <Route path="/groups/new" element={<CreateGroupPage />} />
                            <Route path="/groups/:id" element={<GroupDetailPage />} />
                            {/* Use the new MUI pages here */}
                            <Route path="/messages" element={<MessagesPage />} />
                            <Route path="/messages/new" element={<NewMessagePage />} />
                            <Route path="/dashboard" element={<DashboardPage />} />
                            <Route path="/profile" element={<ProfilePage />} />
                            <Route path="*" element={<div style={{ textAlign: 'center', padding: '5rem' }}>Page not found</div>} />
                        </Routes>
                    </Layout>
                </BrowserRouter>
            </AuthProvider>
        </ThemeProvider>
    );
}

export default App;

================
File: assets/react.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

================
File: components/Modal.jsx
================
// src/components/Modal.jsx
import React from 'react';

const Modal = ({ children, headerContent, bodyContent }) => {
    return (
        <div className="shadow-lg flex flex-col m-auto bg-dark overflow-hidden border border-orchid/10 rounded-3xl max-w-[400px] w-full">
            <div className="flex flex-col items-center border-b border-[#0D0C10] p-6">
                {headerContent}
            </div>
            <div className="flex flex-col border-t border-orchid/10 p-6">
                {bodyContent}
            </div>
        </div>
    );
};

export default Modal;

================
File: components/Navbar.jsx
================
import React from 'react';
import { Link, useLocation } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';

const Navbar = () => {
    const location = useLocation();
    const { isAuthenticated, currentUser, logout } = useAuth();

    const isActive = (path) => location.pathname === path;

    const handleLogout = async () => {
        await logout();
        window.location.href = '/';
    };

    return (
        <header style={{ width: '100%', borderBottom: '1px solid rgba(111, 50, 240, 0.05)' }}>
            <div className="container" style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', padding: '1.5rem 1.5rem' }}>
                <Link to="/" style={{ display: 'flex', alignItems: 'center', textDecoration: 'none' }}>
                    <h1 style={{ fontSize: '1.5rem', fontWeight: 'bold', color: 'white', margin: 0 }}>
                        CodeNest<span style={{ color: 'rgba(188, 164, 245, 0.3)' }}>.</span><span style={{ color: '#8F69FA' }}>io</span>
                    </h1>
                </Link>

                <nav style={{ display: 'flex', alignItems: 'center', gap: '1.5rem' }}>
                    <Link
                        to="/"
                        style={{
                            fontSize: '0.875rem',
                            fontWeight: '500',
                            color: isActive('/') ? '#673CE3' : '#9C95AC',
                            textDecoration: 'none',
                            transition: 'color 0.2s'
                        }}
                    >
                        Home
                    </Link>

                    {/* Latest link removed for privacy reasons */}

                    {isAuthenticated ? (
                        <>
                            <Link
                                to="/code/new"
                                style={{
                                    fontSize: '0.875rem',
                                    fontWeight: '500',
                                    color: isActive('/code/new') ? '#673CE3' : '#9C95AC',
                                    textDecoration: 'none',
                                    transition: 'color 0.2s'
                                }}
                            >
                                New Snippet
                            </Link>

                            {isAuthenticated && (
                                <Link
                                    to="/groups"
                                    style={{
                                        fontSize: '0.875rem',
                                        fontWeight: '500',
                                        color: isActive('/groups') ? '#673CE3' : '#9C95AC',
                                        textDecoration: 'none',
                                        transition: 'color 0.2s'
                                    }}
                                >
                                    Groups
                                </Link>
                            )}
                            {isAuthenticated && (
                                <Link
                                    to="/messages"
                                    style={{
                                        fontSize: '0.875rem',
                                        fontWeight: '500',
                                        color: isActive('/messages') ? '#673CE3' : '#9C95AC',
                                        textDecoration: 'none',
                                        transition: 'color 0.2s'
                                    }}
                                >
                                    Messages
                                </Link>
                            )}

                            {isAuthenticated && (
                                <Link
                                    to="/dashboard"
                                    style={{
                                        fontSize: '0.875rem',
                                        fontWeight: '500',
                                        color: isActive('/dashboard') ? '#673CE3' : '#9C95AC',
                                        textDecoration: 'none',
                                        transition: 'color 0.2s'
                                    }}
                                >
                                    Dashboard
                                </Link>
                            )}
                            <button
                                onClick={handleLogout}
                                style={{
                                    fontSize: '0.875rem',
                                    fontWeight: '500',
                                    color: '#9C95AC',
                                    background: 'none',
                                    border: 'none',
                                    cursor: 'pointer'
                                }}
                            >
                                Logout
                            </button>
                        </>
                    ) : (
                        <>
                            <Link
                                to="/register"
                                style={{
                                    fontSize: '0.875rem',
                                    fontWeight: '500',
                                    color: isActive('/register') ? '#673CE3' : '#9C95AC',
                                    textDecoration: 'none',
                                    transition: 'color 0.2s'
                                }}
                            >
                                Register
                            </Link>
                            <Link
                                to="/login"
                                className="btn-primary"
                            >
                                Login
                            </Link>
                        </>
                    )}
                </nav>
            </div>
        </header>
    );
};

export default Navbar;

================
File: contexts/AuthContext.jsx
================
import React, { createContext, useState, useContext, useEffect } from 'react';

const AuthContext = createContext(null);

export const AuthProvider = ({ children }) => {
    const [currentUser, setCurrentUser] = useState(null);
    const [loading, setLoading] = useState(true);

    // Existing code for initial auth check
    useEffect(() => {
        const checkLoginStatus = async () => {
            try {
                const response = await fetch('/api/auth/me', {
                    credentials: 'include'
                });

                if (response.ok) {
                    const userData = await response.json();
                    setCurrentUser(userData); // 👈 This now uses the full user object
                }
            } catch (error) {
                console.error('Auth check failed:', error);
            } finally {
                setLoading(false);
            }
        };
        checkLoginStatus();
    }, []);

    // Modified login function
    const loginUser = async (email, password, remember) => {
        try {
            const response = await fetch('/api/login', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ email, password, remember }),
                credentials: 'include'
            });

            const data = await response.json();

            if (data.success) {
                // Fetch complete user data after login
                const userResponse = await fetch('/api/auth/me', {
                    credentials: 'include'
                });
                const userData = await userResponse.json();
                setCurrentUser(userData); // 👈 Set full user object
                return { success: true };
            }
            return { success: false, message: data.message || 'Login failed' };
        } catch (error) {
            return { success: false, message: 'An error occurred' };
        }
    };

    // Add this new function to update user state
    const setUser = (userData) => {
        setCurrentUser({
            uuid: userData.uuid,
            name: userData.name,
            email: userData.email
        });
    };

    const logoutUser = async () => {
        try {
            await fetch('/api/logout', {
                method: 'POST',
                credentials: 'include'
            });
            setCurrentUser(null);
            return true;
        } catch (error) {
            console.error('Logout failed:', error);
            return false;
        }
    };

    const value = {
        currentUser,
        isAuthenticated: !!currentUser,
        loading,
        login: loginUser, // 👈 Renamed function
        logout: logoutUser,
        setUser // 👈 Expose the setter
    };

    return (
        <AuthContext.Provider value={value}>
            {children}
        </AuthContext.Provider>
    );
};

export const useAuth = () => {
    return useContext(AuthContext);
};

================
File: index.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Base styles */
body {
  background-color: #0D0D11;
  color: white;
  font-family: system-ui, -apple-system, sans-serif;
  margin: 0;
  min-height: 100vh;
  position: relative;
}

/* Grain effect */
.grain {
  position: relative;
}

.grain::before {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-image: url("./grain.png");
  background-size: cover;
  opacity: 0.05;
  z-index: -1;
}

/* Purple glows */
.purple-glow {
  position: absolute;
  width: 40rem;
  height: 10rem;
  border-radius: 50%;
  filter: blur(100px);
  z-index: -1;
  background-color: rgba(111, 50, 240, 0.25);
  left: 50%;
  transform: translateX(-50%);
  top: -48px;
}

.purple-glow-bottom {
  position: absolute;
  width: 40rem;
  height: 10rem;
  border-radius: 50%;
  filter: blur(200px);
  z-index: -1;
  background-color: rgba(111, 50, 240, 1);
  left: 50%;
  transform: translateX(-50%);
  bottom: -24rem;
}

/* Component styles */
.card {
  background-color: #16151C;
  border: 1px solid rgba(188, 156, 255, 0.1);
  border-radius: 1.5rem;
  overflow: hidden;
  margin-bottom: 1rem;
}

.card-header {
  padding: 1.25rem 1.5rem;
  border-bottom: 1px solid rgba(13, 12, 16, 1);
}

.card-body {
  padding: 1.5rem;
  border-top: 1px solid rgba(188, 156, 255, 0.1);
}

.btn-primary {
  background-color: #673CE3;
  color: white;
  font-weight: 600;
  padding: 0.625rem 1rem;
  border-radius: 0.5rem;
  transition: all 0.2s;
  border: none;
  cursor: pointer;
  display: inline-block;
  text-align: center;
  text-decoration: none;
  box-shadow: inset 0px 2px 1px -1px rgba(255, 255, 255, 0.12), inset 0px 0px 0px 1px rgba(255, 255, 255, 0.05);
}

.btn-primary:hover {
  background-color: #774BF3;
}

.btn-secondary {
  background-color: #2D2A3D;
  border: 1px solid rgba(188, 156, 255, 0.1);
  color: #9C95AC;
  padding: 0.625rem 1rem;
  border-radius: 0.5rem;
  transition: all 0.2s;
  cursor: pointer;
  display: inline-block;
  text-align: center;
  text-decoration: none;
}

.btn-secondary:hover {
  color: white;
}

.input-field {
  width: 100%;
  background-color: rgba(22, 21, 28, 0.5);
  border: 1px solid rgba(188, 156, 255, 0.1);
  border-radius: 0.5rem;
  padding: 0.75rem 1rem;
  color: white;
  font-size: 0.875rem;
  box-shadow: inset 0px 2px 1px -1px rgba(255, 255, 255, 0.12), inset 0px 0px 0px 1px rgba(255, 255, 255, 0.05);
}

.input-field:focus {
  outline: none;
  border-color: #673CE3;
}

.container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 1rem;
}

.text-primary {
  color: #9C95AC;
}

.text-purple {
  color: #673CE3;
}

.form-radio {
  appearance: none;
  display: inline-block;
  width: 1em;
  height: 1em;
  border-radius: 50%;
  border: 1px solid #9C95AC; /* primary color */
  vertical-align: middle;
  margin-right: 0.5em; /* Adjust as needed */
  position: relative;
  cursor: pointer;
}
.form-radio:checked {
  border-color: #673CE3; /* orchid color */
  background-color: #673CE3;
}
.form-radio:checked::after {
  content: '';
  display: block;
  width: 0.4em;
  height: 0.4em;
  border-radius: 50%;
  background-color: white;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}
.form-radio:focus {
  outline: none;
  box-shadow: 0 0 0 2px rgba(103, 60, 227, 0.5); /* Optional focus ring */
}

================
File: main.tsx
================
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.tsx'

createRoot(document.getElementById('root')!).render(
  // <StrictMode>
    <App />
  // </StrictMode>,
)

================
File: pages/ConversationPage.jsx
================
import React, { useState, useEffect, useRef } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { messageService } from '../services/api';
import { useAuth } from '../contexts/AuthContext';
import {
    Box,
    Typography,
    Paper,
    TextField,
    Button,
    CircularProgress,
    Alert,
    IconButton,
    Avatar,
    useTheme
} from '@mui/material';
import {
    ArrowBack as ArrowBackIcon,
    Send as SendIcon
} from '@mui/icons-material';

// Helper to get initials and avatar color
const getAvatarInfo = (name) => {
    const initials = name ? name.split(' ').map(n => n[0]).join('').toUpperCase().substring(0, 2) : '?';
    // Simple hash function for deterministic color based on name
    let hash = 0;
    for (let i = 0; i < (name?.length || 0); i++) {
        hash = name.charCodeAt(i) + ((hash << 5) - hash);
    }
    const colors = [
        '#e91e63', '#9c27b0', '#673ab7', '#3f51b5',
        '#2196f3', '#03a9f4', '#00bcd4', '#009688'
    ];
    const color = colors[Math.abs(hash) % colors.length];
    return { initials, color };
};

// Helper to format message time
const formatMessageTime = (dateString) => {
    return new Date(dateString).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
};

const ConversationPage = () => {
    const { userId } = useParams();
    const { currentUser } = useAuth();
    const navigate = useNavigate();
    const theme = useTheme();

    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [otherUser, setOtherUser] = useState(null);
    const [messages, setMessages] = useState([]);
    const [newMessage, setNewMessage] = useState('');
    const [sending, setSending] = useState(false);

    const messagesEndRef = useRef(null);

    // Force layout to reapply correctly after component mounts
    useEffect(() => {
        // Force a reflow/repaint on mount
        const timer = setTimeout(() => {
            const element = document.getElementById('conversation-wrapper');
            if (element) {
                // This will force a reflow by accessing a layout property
                const forced = element.offsetHeight;
                console.log("Forced reflow for conversation wrapper");
            }
        }, 50);

        return () => clearTimeout(timer);
    }, []);

    // Fetch conversation when userId changes
    useEffect(() => {
        const fetchConversation = async () => {
            try {
                setLoading(true);
                setError(null);

                const response = await messageService.getConversation(userId);

                if (response.success) {
                    // Process the messages if needed
                    const processedMessages = await messageService.processConversationMessages(response.messages);

                    setOtherUser(response.otherUser);
                    setMessages(processedMessages);
                } else {
                    throw new Error(response.message || 'Failed to load conversation');
                }
            } catch (err) {
                console.error('Error loading conversation:', err);
                setError(err.message || 'An error occurred');
            } finally {
                setLoading(false);
            }
        };

        if (userId) {
            fetchConversation();
        }
    }, [userId]);

    // Scroll to bottom whenever messages change
    useEffect(() => {
        messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
    }, [messages]);

    const handleSendMessage = async (e) => {
        e.preventDefault();

        if (!newMessage.trim()) return;

        try {
            setSending(true);

            const result = await messageService.sendMessage({
                receiverId: parseInt(userId),
                content: newMessage.trim()
            });

            if (result.success) {
                // Clear the input
                setNewMessage('');

                // Refetch the conversation to get the updated messages
                const response = await messageService.getConversation(userId);
                if (response.success) {
                    const processedMessages = await messageService.processConversationMessages(response.messages);
                    setMessages(processedMessages);
                }
            } else {
                throw new Error(result.message || 'Failed to send message');
            }
        } catch (err) {
            console.error('Error sending message:', err);
            setError(`Failed to send message: ${err.message || 'An error occurred'}`);
        } finally {
            setSending(false);
        }
    };

    // Get avatar info for users
    const otherUserAvatar = otherUser ? getAvatarInfo(otherUser.username) : { initials: '?', color: '#673ab7' };
    const currentUserAvatar = getAvatarInfo(currentUser?.username);

    return (
        <div
            id="conversation-wrapper"
            style={{
                // Increased width for a more substantial appearance
                maxWidth: '1000px',
                width: '90%',
                margin: '0 auto',
                padding: '2rem 1rem',
                position: 'relative',
                zIndex: 5,
                // Set a fixed height to prevent page scrolling
                height: 'calc(100vh - 120px)', // Account for navbar and some padding
                display: 'flex',
                flexDirection: 'column',
                overflow: 'hidden' // Prevent outer scrolling
            }}
        >
            <Paper
                elevation={3}
                sx={{
                    borderRadius: 2,
                    backgroundColor: theme.palette.mode === 'dark' ? '#16151C' : 'background.paper',
                    border: '1px solid',
                    borderColor: theme.palette.mode === 'dark' ? 'rgba(188, 156, 255, 0.1)' : 'divider',
                    display: 'flex',
                    flexDirection: 'column',
                    // Use 100% height to fill the parent container
                    height: '100%',
                    position: 'relative',
                    zIndex: 5,
                    overflow: 'hidden' // Prevent Paper from scrolling
                }}
            >
                {/* Header */}
                <Box
                    sx={{
                        display: 'flex',
                        alignItems: 'center',
                        p: 2,
                        borderBottom: '1px solid',
                        borderColor: theme.palette.mode === 'dark' ? 'rgba(188, 156, 255, 0.1)' : 'divider'
                    }}
                >
                    <IconButton
                        edge="start"
                        onClick={() => navigate('/messages')}
                        sx={{ mr: 2 }}
                    >
                        <ArrowBackIcon />
                    </IconButton>

                    {otherUser ? (
                        <>
                            <Avatar
                                sx={{
                                    bgcolor: otherUserAvatar.color,
                                    mr: 2
                                }}
                            >
                                {otherUserAvatar.initials}
                            </Avatar>
                            <Box>
                                <Typography variant="h6">{otherUser.username}</Typography>
                            </Box>
                        </>
                    ) : (
                        <Typography variant="h6">Conversation</Typography>
                    )}
                </Box>

                {/* Error message */}
                {error && (
                    <Alert
                        severity="error"
                        sx={{ mx: 2, my: 1 }}
                        onClose={() => setError(null)}
                    >
                        {error}
                    </Alert>
                )}

                {/* Messages container - allow scrolling here */}
                <Box
                    sx={{
                        flexGrow: 1,
                        overflowY: 'auto', // Allow scrolling within messages
                        p: 2,
                        display: 'flex',
                        flexDirection: 'column',
                        gap: 1,
                        bgcolor: theme.palette.mode === 'dark' ? 'rgba(13, 13, 17, 0.3)' : 'rgba(0, 0, 0, 0.02)'
                    }}
                >
                    {loading ? (
                        <Box display="flex" justifyContent="center" alignItems="center" height="100%">
                            <CircularProgress size={40} sx={{ color: '#673CE3' }} />
                        </Box>
                    ) : messages.length === 0 ? (
                        <Box
                            display="flex"
                            flexDirection="column"
                            justifyContent="center"
                            alignItems="center"
                            height="100%"
                            color="text.secondary"
                        >
                            <Typography variant="body1" gutterBottom>
                                No messages yet
                            </Typography>
                            <Typography variant="body2">
                                Start the conversation by sending a message below
                            </Typography>
                        </Box>
                    ) : (
                        // Message bubbles
                        messages.map((message) => {
                            const isSent = message.direction === 'sent';
                            const avatarInfo = isSent ? currentUserAvatar : otherUserAvatar;

                            return (
                                <Box
                                    key={message.id}
                                    sx={{
                                        display: 'flex',
                                        justifyContent: isSent ? 'flex-end' : 'flex-start',
                                        mb: 1.5
                                    }}
                                >
                                    {!isSent && (
                                        <Avatar
                                            sx={{
                                                bgcolor: avatarInfo.color,
                                                width: 32,
                                                height: 32,
                                                mr: 1,
                                                alignSelf: 'flex-end',
                                                mb: 0.5
                                            }}
                                        >
                                            {avatarInfo.initials}
                                        </Avatar>
                                    )}

                                    <Box
                                        sx={{
                                            maxWidth: '70%',
                                            backgroundColor: isSent
                                                ? theme.palette.mode === 'dark' ? '#673CE3' : 'primary.main'
                                                : theme.palette.mode === 'dark' ? '#2D2A3D' : 'grey.100',
                                            color: isSent
                                                ? 'white'
                                                : theme.palette.mode === 'dark' ? 'text.primary' : 'text.primary',
                                            borderRadius: 2,
                                            px: 2,
                                            py: 1,
                                            position: 'relative'
                                        }}
                                    >
                                        <Typography variant="body1">{message.content}</Typography>
                                        <Typography
                                            variant="caption"
                                            display="block"
                                            color={isSent ? 'rgba(255,255,255,0.7)' : 'text.secondary'}
                                            textAlign="right"
                                            mt={0.5}
                                        >
                                            {formatMessageTime(message.sentAt)}
                                        </Typography>

                                        {/* If there's a snippet attached */}
                                        {message.snipUuid && (
                                            <Box
                                                onClick={() => navigate(`/code/${message.snipUuid}`)}
                                                sx={{
                                                    mt: 1,
                                                    p: 1,
                                                    borderRadius: 1,
                                                    backgroundColor: 'rgba(0,0,0,0.1)',
                                                    cursor: 'pointer',
                                                    '&:hover': {
                                                        backgroundColor: 'rgba(0,0,0,0.2)',
                                                    }
                                                }}
                                            >
                                                <Typography variant="caption" fontWeight="bold">
                                                    Code Snippet
                                                </Typography>
                                                <Typography variant="caption" display="block">
                                                    Click to view
                                                </Typography>
                                            </Box>
                                        )}
                                    </Box>

                                    {isSent && (
                                        <Avatar
                                            sx={{
                                                bgcolor: avatarInfo.color,
                                                width: 32,
                                                height: 32,
                                                ml: 1,
                                                alignSelf: 'flex-end',
                                                mb: 0.5
                                            }}
                                        >
                                            {avatarInfo.initials}
                                        </Avatar>
                                    )}
                                </Box>
                            );
                        })
                    )}
                    {/* Invisible element to scroll to */}
                    <div ref={messagesEndRef} />
                </Box>

                {/* Message input - fixed at bottom */}
                <Box
                    component="form"
                    onSubmit={handleSendMessage}
                    sx={{
                        p: 2,
                        borderTop: '1px solid',
                        borderColor: theme.palette.mode === 'dark' ? 'rgba(188, 156, 255, 0.1)' : 'divider',
                        display: 'flex',
                        alignItems: 'center',
                        gap: 1
                    }}
                >
                    <TextField
                        fullWidth
                        placeholder="Type a message..."
                        variant="outlined"
                        size="small"
                        value={newMessage}
                        onChange={(e) => setNewMessage(e.target.value)}
                        disabled={sending}
                        sx={{
                            '& .MuiOutlinedInput-root': {
                                borderRadius: '20px',
                                bgcolor: theme.palette.mode === 'dark' ? 'rgba(22, 21, 28, 0.5)' : 'background.paper',
                                '&.Mui-focused .MuiOutlinedInput-notchedOutline': {
                                    borderColor: '#673CE3',
                                }
                            }
                        }}
                    />
                    <Button
                        type="submit"
                        variant="contained"
                        color="primary"
                        disabled={sending || !newMessage.trim()}
                        sx={{
                            minWidth: '52px',
                            width: '52px',
                            height: '40px',
                            borderRadius: '20px',
                            bgcolor: theme.palette.mode === 'dark' ? '#673CE3' : 'primary.main',
                            '&:hover': {
                                bgcolor: theme.palette.mode === 'dark' ? '#774BF3' : 'primary.dark',
                            }
                        }}
                    >
                        {sending ? (
                            <CircularProgress size={24} sx={{ color: 'white' }} />
                        ) : (
                            <SendIcon />
                        )}
                    </Button>
                </Box>
            </Paper>
        </div>
    );
};

export default ConversationPage;

================
File: pages/CreateGroupPage.jsx
================
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { groupService } from '../services/api';
import {
    Container,
    Paper,
    Box,
    Typography,
    TextField,
    Button,
    CircularProgress,
    Alert,
    IconButton,
    useTheme
} from '@mui/material';
import {
    GroupAdd as GroupAddIcon,
    ArrowBack as ArrowBackIcon
} from '@mui/icons-material';

const CreateGroupPage = () => {
    const [name, setName] = useState('');
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState('');
    const navigate = useNavigate();
    const theme = useTheme();

    // Consistent card styles
    const cardStyle = {
        borderRadius: 3,
        bgcolor: theme.palette.mode === 'dark' ? '#16151C' : 'background.paper',
        border: '1px solid',
        borderColor: theme.palette.mode === 'dark' ? 'rgba(188, 156, 255, 0.1)' : 'divider',
        overflow: 'hidden',
    };

    const cardHeaderStyle = {
        p: 2.5,
        borderBottom: '1px solid',
        borderColor: theme.palette.mode === 'dark' ? 'rgba(13, 12, 16, 1)' : 'divider',
        display: 'flex',
        alignItems: 'center',
        gap: 1.5,
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        if (!name.trim()) {
            setError('Group name is required');
            return;
        }
        try {
            setLoading(true);
            setError('');
            const result = await groupService.createGroup({ name: name.trim() });
            if (result.success && result.groupId) {
                navigate(`/groups/${result.groupId}`); // Navigate to the new group's detail page
            } else {
                setError(result.message || 'Failed to create group');
            }
        } catch (err) {
            setError(err.message || 'An error occurred');
        } finally {
            setLoading(false);
        }
    };

    return (
        <Container
            maxWidth="sm" // Smaller container for a simple form
            sx={{
                py: 4,
                px: { xs: 2, sm: 3 },
                position: 'relative',
                zIndex: 5
            }}
        >
            {/* Back Button */}
            <Button
                startIcon={<ArrowBackIcon />}
                onClick={() => navigate('/groups')}
                sx={{ mb: 2, color: 'text.secondary' }}
            >
                Back to Groups
            </Button>

            <Paper elevation={0} sx={cardStyle}>
                <Box sx={cardHeaderStyle}>
                    <GroupAddIcon sx={{ color: theme.palette.primary.main }} />
                    <Typography variant="h6" fontWeight="bold">
                        Create New Group
                    </Typography>
                </Box>

                <Box p={3}>
                    {error && (
                        <Alert severity="error" sx={{ mb: 3 }} onClose={() => setError('')}>
                            {error}
                        </Alert>
                    )}

                    <Box component="form" onSubmit={handleSubmit} noValidate>
                        <TextField
                            label="Group Name"
                            fullWidth
                            required
                            variant="outlined"
                            value={name}
                            onChange={(e) => setName(e.target.value)}
                            disabled={loading}
                            placeholder="Enter a name for your group"
                            sx={{ mb: 3 }}
                        />

                        <Box sx={{ display: 'flex', justifyContent: 'flex-end' }}>
                            <Button
                                type="submit"
                                variant="contained"
                                color="primary"
                                disabled={loading || !name.trim()}
                                size="large"
                                sx={{
                                    minWidth: '160px',
                                    py: 1.2,
                                    bgcolor: theme.palette.mode === 'dark' ? '#673CE3' : 'primary.main',
                                    '&:hover': { bgcolor: theme.palette.mode === 'dark' ? '#774BF3' : 'primary.dark' }
                                }}
                            >
                                {loading ? (
                                    <CircularProgress size={24} color="inherit" />
                                ) : (
                                    'Create Group'
                                )}
                            </Button>
                        </Box>
                    </Box>
                </Box>
            </Paper>
        </Container>
    );
};

export default CreateGroupPage;

================
File: pages/CreateSnippetPage.jsx
================
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { snippetService } from '../services/api'; // Ensure this path is correct
import {
    Container,
    Paper,
    Box,
    Typography,
    TextField,
    Button,
    FormControl,
    FormLabel,
    RadioGroup,
    FormControlLabel,
    Radio,
    Chip,
    Stack,
    CircularProgress,
    Alert,
    Grid,
    InputAdornment,
    useTheme
} from '@mui/material';
import {
    Code as CodeIcon,
    Timer as TimerIcon,
    Visibility as VisibilityIcon,
    Label as LabelIcon,
    Title as TitleIcon
} from '@mui/icons-material'; // Import icons

const CreateSnippetPage = () => {
    const [tags, setTags] = useState([]);
    const [tagInput, setTagInput] = useState('');
    const [title, setTitle] = useState('');
    const [code, setCode] = useState('');
    const [limitType, setLimitType] = useState('none'); // 'none', 'time', 'views'
    const [timeLimit, setTimeLimit] = useState(10); // Default to 10 mins
    const [viewLimit, setViewLimit] = useState(10); // Default to 10 views
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState('');
    const navigate = useNavigate();
    const theme = useTheme(); // Access theme for consistent styling

    // Define consistent card styles (similar to DashboardPage)
    const cardStyle = {
        borderRadius: 3,
        bgcolor: theme.palette.mode === 'dark' ? '#16151C' : 'background.paper',
        border: '1px solid',
        borderColor: theme.palette.mode === 'dark' ? 'rgba(188, 156, 255, 0.1)' : 'divider',
        overflow: 'hidden',
    };

    const cardHeaderStyle = {
        p: 2.5, // Slightly more padding for header
        borderBottom: '1px solid',
        borderColor: theme.palette.mode === 'dark' ? 'rgba(13, 12, 16, 1)' : 'divider',
        display: 'flex',
        alignItems: 'center',
        gap: 1,
    };

    const handleTagKeyDown = (e) => {
        if (e.key === 'Enter' && tagInput.trim()) {
            e.preventDefault();
            const newTag = tagInput.trim().toLowerCase();
            if (!tags.includes(newTag)) {
                setTags([...tags, newTag]);
            }
            setTagInput('');
        }
    };

    const removeTag = (tagToRemove) => {
        setTags(tags.filter(tag => tag !== tagToRemove));
    };

    const handleLimitTypeChange = (e) => {
        const newType = e.target.value;
        setLimitType(newType);
        if (newType === 'time') {
            setViewLimit(10);
            if (timeLimit <= 0) setTimeLimit(10);
        } else if (newType === 'views') {
            setTimeLimit(10);
            if (viewLimit <= 0) setViewLimit(10);
        }
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        setError('');

        if (!code.trim()) {
            setError('Code content cannot be empty.');
            return;
        }
        if (limitType === 'time' && (!timeLimit || timeLimit <= 0)) {
            setError('Please enter a valid time limit greater than 0.');
            return;
        }
        if (limitType === 'views' && (!viewLimit || viewLimit <= 0)) {
            setError('Please enter a valid view limit greater than 0.');
            return;
        }

        setIsLoading(true);

        let expirationType = null;
        let expirationValue = 0;

        if (limitType === 'time') {
            expirationType = 'TIME';
            expirationValue = timeLimit * 60; // Convert minutes to seconds
        } else if (limitType === 'views') {
            expirationType = 'VIEWS';
            expirationValue = viewLimit;
        }

        const payload = {
            title: title.trim() || "Untitled Snippet",
            content: code,
            expirationType,
            expirationValue,
            tags: tags
        };

        try {
            const response = await snippetService.create(payload);
            if (response && response.uuid) {
                // Navigate but skip the immediate view count increment
                navigate(`/code/${response.uuid}?skipIncrement=true`);
            } else {
                const message = response?.message || 'Failed to create snippet - invalid response from server.';
                throw new Error(message);
            }
        } catch (err) {
            console.error('Error creating snippet:', err);
            setError(err.message || 'An unexpected error occurred.');
        } finally {
            setIsLoading(false);
        }
    };

    const isSubmitDisabled = isLoading || !code.trim() ||
        (limitType === 'time' && (!timeLimit || timeLimit <= 0)) ||
        (limitType === 'views' && (!viewLimit || viewLimit <= 0));

    return (
        <Container
            maxWidth="md" // Consistent container size
            sx={{
                py: 4,
                px: { xs: 2, sm: 3 },
                position: 'relative', // Ensure container is above background effects
                zIndex: 5
            }}
        >
            <Paper elevation={0} sx={cardStyle}>
                <Box sx={cardHeaderStyle}>
                    <CodeIcon sx={{ color: theme.palette.primary.main }} />
                    <Typography variant="h6" fontWeight="bold">
                        Create New Snippet
                    </Typography>
                </Box>

                <Box p={3}>
                    {error && (
                        <Alert severity="error" sx={{ mb: 3 }} onClose={() => setError('')}>
                            {error}
                        </Alert>
                    )}

                    <Box component="form" onSubmit={handleSubmit} noValidate>
                        {/* Title Field */}
                        <TextField
                            label="Title (Optional)"
                            fullWidth
                            variant="outlined"
                            value={title}
                            onChange={(e) => setTitle(e.target.value)}
                            disabled={isLoading}
                            sx={{ mb: 3 }}
                            InputProps={{
                                startAdornment: (
                                    <InputAdornment position="start">
                                        <TitleIcon color="action" />
                                    </InputAdornment>
                                ),
                            }}
                        />

                        {/* Code Field */}
                        <TextField
                            label="Code"
                            required
                            fullWidth
                            multiline
                            rows={12} // Adjust rows as needed
                            variant="outlined"
                            value={code}
                            onChange={(e) => setCode(e.target.value)}
                            disabled={isLoading}
                            placeholder="Paste your code here..."
                            sx={{
                                mb: 3,
                                '& .MuiInputBase-input': { // Style textarea
                                    fontFamily: 'monospace',
                                    fontSize: '0.9rem',
                                    lineHeight: 1.5,
                                },
                                '& .MuiOutlinedInput-root': { // Maintain dark background
                                    bgcolor: theme.palette.mode === 'dark' ? 'rgba(13, 13, 17, 0.3)' : 'rgba(0, 0, 0, 0.02)',
                                }
                            }}
                            InputProps={{
                                startAdornment: (
                                    <InputAdornment position="start" sx={{ mt: -12 }}> {/* Adjust vertical position */}
                                        <CodeIcon color="action" />
                                    </InputAdornment>
                                ),
                            }}
                        />

                        {/* Expiration Limit */}
                        <FormControl component="fieldset" sx={{ mb: 2, width: '100%' }}>
                            <FormLabel component="legend" sx={{ mb: 1, fontWeight: 'medium', fontSize: '0.95rem' }}>
                                Expiration Limit
                            </FormLabel>
                            <RadioGroup
                                row
                                aria-label="expiration limit"
                                name="limitType"
                                value={limitType}
                                onChange={handleLimitTypeChange}
                            >
                                <FormControlLabel value="none" control={<Radio />} label="None" disabled={isLoading} />
                                <FormControlLabel value="time" control={<Radio />} label="By Time" disabled={isLoading} />
                                <FormControlLabel value="views" control={<Radio />} label="By Views" disabled={isLoading} />
                            </RadioGroup>
                        </FormControl>

                        {/* Conditional Limit Inputs */}
                        <Grid container spacing={2} sx={{ mb: 3, minHeight: '80px' }}> {/* Grid for layout */}
                            <Grid item xs={12} sm={6} sx={{ display: limitType === 'time' ? 'block' : 'none' }}>
                                <TextField
                                    label="Time Limit"
                                    type="number"
                                    fullWidth
                                    variant="outlined"
                                    value={timeLimit}
                                    onChange={(e) => setTimeLimit(Math.max(1, parseInt(e.target.value) || 1))}
                                    disabled={isLoading || limitType !== 'time'}
                                    required={limitType === 'time'}
                                    InputProps={{
                                        startAdornment: (
                                            <InputAdornment position="start">
                                                <TimerIcon color="action" />
                                            </InputAdornment>
                                        ),
                                        endAdornment: <InputAdornment position="end">minutes</InputAdornment>,
                                        inputProps: { min: 1 }
                                    }}
                                    helperText={limitType === 'time' && timeLimit > 0 ? `Expires after ${timeLimit} minute${timeLimit === 1 ? '' : 's'}` : ' '}
                                />
                            </Grid>
                            <Grid item xs={12} sm={6} sx={{ display: limitType === 'views' ? 'block' : 'none' }}>
                                <TextField
                                    label="View Limit"
                                    type="number"
                                    fullWidth
                                    variant="outlined"
                                    value={viewLimit}
                                    onChange={(e) => setViewLimit(Math.max(1, parseInt(e.target.value) || 1))}
                                    disabled={isLoading || limitType !== 'views'}
                                    required={limitType === 'views'}
                                    InputProps={{
                                        startAdornment: (
                                            <InputAdornment position="start">
                                                <VisibilityIcon color="action" />
                                            </InputAdornment>
                                        ),
                                        endAdornment: <InputAdornment position="end">views</InputAdornment>,
                                        inputProps: { min: 1 }
                                    }}
                                    helperText={limitType === 'views' && viewLimit > 0 ? `Vanishes after ${viewLimit} view${viewLimit === 1 ? '' : 's'}` : ' '}
                                />
                            </Grid>
                        </Grid>

                        {/* Tags */}
                        <FormControl component="fieldset" sx={{ mb: 3, width: '100%' }}>
                            <FormLabel component="legend" sx={{ mb: 1, fontWeight: 'medium', fontSize: '0.95rem' }}>
                                Tags (Optional)
                            </FormLabel>
                            <Stack direction="row" spacing={1} sx={{ mb: 1.5, flexWrap: 'wrap' }}>
                                {tags.map(tag => (
                                    <Chip
                                        key={tag}
                                        label={tag}
                                        onDelete={() => removeTag(tag)}
                                        size="small"
                                        sx={{
                                            bgcolor: theme.palette.mode === 'dark' ? 'rgba(22, 21, 28, 0.7)' : 'rgba(0, 0, 0, 0.08)',
                                            color: theme.palette.mode === 'dark' ? '#9C95AC' : 'text.secondary',
                                            mb: 0.5 // Margin bottom for wrap spacing
                                        }}
                                    />
                                ))}
                            </Stack>
                            <TextField
                                label="Add a Tag"
                                fullWidth
                                variant="outlined"
                                value={tagInput}
                                onChange={(e) => setTagInput(e.target.value)}
                                onKeyDown={handleTagKeyDown}
                                disabled={isLoading}
                                placeholder="Type tag and press Enter"
                                size="small" // Make tag input smaller
                                InputProps={{
                                    startAdornment: (
                                        <InputAdornment position="start">
                                            <LabelIcon color="action" />
                                        </InputAdornment>
                                    ),
                                }}
                            />
                        </FormControl>

                        {/* Submit Button */}
                        <Box sx={{ display: 'flex', justifyContent: 'flex-end', mt: 2 }}>
                            <Button
                                type="submit"
                                variant="contained"
                                color="primary"
                                disabled={isSubmitDisabled}
                                size="large"
                                sx={{
                                    minWidth: '180px',
                                    py: 1.2,
                                    bgcolor: theme.palette.mode === 'dark' ? '#673CE3' : 'primary.main',
                                    '&:hover': {
                                        bgcolor: theme.palette.mode === 'dark' ? '#774BF3' : 'primary.dark',
                                    }
                                }}
                            >
                                {isLoading ? (
                                    <CircularProgress size={24} color="inherit" />
                                ) : (
                                    'Create Snippet'
                                )}
                            </Button>
                        </Box>
                    </Box>
                </Box>
            </Paper>
        </Container>
    );
};

export default CreateSnippetPage;

================
File: pages/DashboardPage.jsx
================
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { snippetService, messageService, groupService } from '../services/api';
import { useAuth } from '../contexts/AuthContext';
import {
    Box,
    Container,
    Grid,
    Paper,
    Typography,
    Button,
    Avatar,
    Divider,
    List,
    ListItem,
    ListItemText,
    ListItemAvatar,
    ListItemSecondaryAction,
    Chip,
    Card,
    CardHeader,
    CardContent,
    CardActions,
    CircularProgress,
    IconButton,
    Stack,
    useTheme
} from '@mui/material';
import {
    Code as CodeIcon,
    Group as GroupIcon,
    Email as EmailIcon,
    PersonOutline as PersonIcon,
    Add as AddIcon,
    ChevronRight as ChevronRightIcon,
    Dashboard as DashboardIcon,
    BlockOutlined as BlockIcon
} from '@mui/icons-material';

// Helper to get avatar colors based on string (consistent with other pages)
const getAvatarColor = (str) => {
    if (!str) return '#673CE3';

    let hash = 0;
    for (let i = 0; i < str.length; i++) {
        hash = str.charCodeAt(i) + ((hash << 5) - hash);
    }

    const colors = [
        '#e91e63', '#9c27b0', '#673ab7', '#3f51b5',
        '#2196f3', '#03a9f4', '#00bcd4', '#009688'
    ];

    return colors[Math.abs(hash) % colors.length];
};

const DashboardPage = () => {
    const [snippets, setSnippets] = useState([]);
    const [messages, setMessages] = useState([]);
    const [groups, setGroups] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const { currentUser } = useAuth();
    const navigate = useNavigate();
    const theme = useTheme();

    useEffect(() => {
        const fetchDashboardData = async () => {
            if (!currentUser) return;
            try {
                setLoading(true);
                setError(null);

                // Fetch user's snippets
                const snippetsData = await snippetService.getUserSnippets();
                if (snippetsData.success) {
                    setSnippets(snippetsData.snippets || []);
                }

                // Fetch recent messages
                const messagesData = await messageService.getInbox();
                if (messagesData.success) {
                    // Only take the first 5 messages for the dashboard view
                    setMessages(messagesData.messages?.slice(0, 5) || []);
                }

                // Fetch user's groups
                const groupsData = await groupService.getMyGroups();
                if (groupsData.success) {
                    // Display first 5 groups on dashboard
                    setGroups(groupsData.groups?.slice(0, 5) || []);
                }
            } catch (err) {
                console.error("Dashboard fetch error:", err);
                setError(err.message || 'Failed to load some dashboard data');
            } finally {
                setLoading(false);
            }
        };

        fetchDashboardData();
    }, [currentUser]);

    if (loading) {
        return (
            <Box
                display="flex"
                justifyContent="center"
                alignItems="center"
                minHeight="calc(100vh - 80px)"
                sx={{
                    position: 'relative',
                    zIndex: 5
                }}
            >
                <CircularProgress size={40} sx={{ color: '#673CE3' }} />
            </Box>
        );
    }

    // Card style with consistent styling for all cards
    const cardStyle = {
        borderRadius: 3,
        bgcolor: theme.palette.mode === 'dark' ? '#16151C' : 'background.paper',
        border: '1px solid',
        borderColor: theme.palette.mode === 'dark' ? 'rgba(188, 156, 255, 0.1)' : 'divider',
        overflow: 'hidden',
        height: '100%',
        display: 'flex',
        flexDirection: 'column'
    };

    // Card header style
    const cardHeaderStyle = {
        p: 2,
        borderBottom: '1px solid',
        borderColor: theme.palette.mode === 'dark' ? 'rgba(13, 12, 16, 1)' : 'divider'
    };

    return (
        <Container
            maxWidth="lg"
            sx={{
                py: 4,
                px: { xs: 2, sm: 3 },
                position: 'relative',
                zIndex: 5
            }}
        >
            <Typography variant="h4" fontWeight="bold" mb={4} color="white">
                Dashboard
            </Typography>

            {/* Bento Box Layout */}
            <Box sx={{ display: 'grid', gridTemplateColumns: { xs: '1fr', md: 'repeat(12, 1fr)' }, gap: 3 }}>
                {/* Profile Card - 4 columns with centered content */}
                <Box sx={{ gridColumn: { xs: 'span 12', md: 'span 4' }, gridRow: { md: 'span 1' } }}>
                    <Paper elevation={0} sx={cardStyle}>
                        <Box
                            p={3}
                            sx={{
                                flexGrow: 1,
                                display: 'flex',
                                flexDirection: 'column',
                                justifyContent: 'center',
                                alignItems: 'center'
                            }}
                        >
                            <Avatar
                                sx={{
                                    width: 80,
                                    height: 80,
                                    bgcolor: getAvatarColor(currentUser?.username),
                                    mb: 2
                                }}
                            >
                                {currentUser?.username?.charAt(0) || 'U'}
                            </Avatar>

                            <Typography variant="h6" fontWeight="bold" align="center">
                                {currentUser?.username}
                            </Typography>

                            <Typography variant="body2" color="text.secondary" align="center" mb={3}>
                                {currentUser?.email}
                            </Typography>

                            <Button
                                variant="outlined"
                                fullWidth
                                sx={{
                                    mt: 1,
                                    borderColor: theme.palette.mode === 'dark' ? 'rgba(188, 156, 255, 0.2)' : 'divider',
                                    color: theme.palette.mode === 'dark' ? '#9C95AC' : 'text.secondary',
                                    '&:hover': {
                                        borderColor: theme.palette.mode === 'dark' ? 'rgba(188, 156, 255, 0.3)' : 'primary.main',
                                        bgcolor: 'rgba(188, 156, 255, 0.05)'
                                    }
                                }}
                                startIcon={<PersonIcon />}
                                onClick={() => navigate('/profile')}
                            >
                                Edit Profile
                            </Button>
                        </Box>
                    </Paper>
                </Box>

                {/* Stats Card - 4 columns with centered content */}
                <Box sx={{ gridColumn: { xs: 'span 12', md: 'span 4' }, gridRow: { md: 'span 1' } }}>
                    <Paper elevation={0} sx={cardStyle}>
                        <Box sx={cardHeaderStyle}>
                            <Typography variant="h6" fontWeight="bold">
                                Stats
                            </Typography>
                        </Box>

                        <Box
                            p={2}
                            sx={{
                                flexGrow: 1,
                                display: 'flex',
                                flexDirection: 'column',
                                justifyContent: 'center',
                                alignItems: 'center'
                            }}
                        >
                            <Grid container spacing={3} justifyContent="center">
                                <Grid item xs={5}>
                                    <Paper
                                        elevation={0}
                                        sx={{
                                            p: 2,
                                            textAlign: 'center',
                                            bgcolor: theme.palette.mode === 'dark' ? 'rgba(22, 21, 28, 0.5)' : 'background.paper',
                                            border: '1px solid',
                                            borderColor: theme.palette.mode === 'dark' ? 'rgba(188, 156, 255, 0.05)' : 'divider',
                                            borderRadius: 2
                                        }}
                                    >
                                        <Typography variant="h4" fontWeight="bold" color="#673CE3">
                                            {snippets.length}
                                        </Typography>
                                        <Typography variant="body2" color="text.secondary">
                                            Snippets
                                        </Typography>
                                    </Paper>
                                </Grid>
                                <Grid item xs={5}>
                                    <Paper
                                        elevation={0}
                                        sx={{
                                            p: 2,
                                            textAlign: 'center',
                                            bgcolor: theme.palette.mode === 'dark' ? 'rgba(22, 21, 28, 0.5)' : 'background.paper',
                                            border: '1px solid',
                                            borderColor: theme.palette.mode === 'dark' ? 'rgba(188, 156, 255, 0.05)' : 'divider',
                                            borderRadius: 2
                                        }}
                                    >
                                        <Typography variant="h4" fontWeight="bold" color="#673CE3">
                                            {groups.length}
                                        </Typography>
                                        <Typography variant="body2" color="text.secondary">
                                            Groups
                                        </Typography>
                                    </Paper>
                                </Grid>
                            </Grid>
                        </Box>
                    </Paper>
                </Box>

                {/* Quick Actions Card - 4 columns */}
                <Box sx={{ gridColumn: { xs: 'span 12', md: 'span 4' }, gridRow: { md: 'span 1' } }}>
                    <Paper elevation={0} sx={cardStyle}>
                        <Box sx={cardHeaderStyle}>
                            <Typography variant="h6" fontWeight="bold">
                                Quick Actions
                            </Typography>
                        </Box>

                        <Box p={2} display="flex" flexDirection="column" gap={2} sx={{ flexGrow: 1, justifyContent: 'center' }}>
                            <Button
                                variant="contained"
                                fullWidth
                                startIcon={<CodeIcon />}
                                onClick={() => navigate('/code/new')}
                                sx={{
                                    py: 1,
                                    bgcolor: theme.palette.mode === 'dark' ? '#673CE3' : 'primary.main',
                                    '&:hover': {
                                        bgcolor: theme.palette.mode === 'dark' ? '#774BF3' : 'primary.dark',
                                    }
                                }}
                            >
                                New Snippet
                            </Button>

                            <Button
                                variant="outlined"
                                fullWidth
                                startIcon={<GroupIcon />}
                                onClick={() => navigate('/groups/new')}
                                sx={{
                                    py: 1,
                                    borderColor: theme.palette.mode === 'dark' ? 'rgba(188, 156, 255, 0.2)' : 'divider',
                                    color: theme.palette.mode === 'dark' ? '#9C95AC' : 'text.secondary',
                                    '&:hover': {
                                        borderColor: theme.palette.mode === 'dark' ? 'rgba(188, 156, 255, 0.3)' : 'primary.main',
                                        bgcolor: 'rgba(188, 156, 255, 0.05)'
                                    }
                                }}
                            >
                                Create Group
                            </Button>

                            <Button
                                variant="outlined"
                                fullWidth
                                startIcon={<EmailIcon />}
                                onClick={() => navigate('/messages/new')}
                                sx={{
                                    py: 1,
                                    borderColor: theme.palette.mode === 'dark' ? 'rgba(188, 156, 255, 0.2)' : 'divider',
                                    color: theme.palette.mode === 'dark' ? '#9C95AC' : 'text.secondary',
                                    '&:hover': {
                                        borderColor: theme.palette.mode === 'dark' ? 'rgba(188, 156, 255, 0.3)' : 'primary.main',
                                        bgcolor: 'rgba(188, 156, 255, 0.05)'
                                    }
                                }}
                            >
                                New Message
                            </Button>
                        </Box>
                    </Paper>
                </Box>

                {/* Recent Snippets - Full width for visibility */}
                <Box sx={{ gridColumn: 'span 12', gridRow: { md: 'span 1' } }}>
                    <Paper elevation={0} sx={cardStyle}>
                        <Box sx={cardHeaderStyle}>
                            <Typography variant="h6" fontWeight="bold">
                                Recent Snippets
                            </Typography>
                        </Box>

                        {snippets.length === 0 ? (
                            <Box textAlign="center" py={4} px={2}>
                                <Typography color="text.secondary" gutterBottom>
                                    You haven't created any snippets yet.
                                </Typography>
                                <Button
                                    variant="contained"
                                    startIcon={<AddIcon />}
                                    onClick={() => navigate('/code/new')}
                                    sx={{
                                        mt: 2,
                                        bgcolor: theme.palette.mode === 'dark' ? '#673CE3' : 'primary.main',
                                        '&:hover': {
                                            bgcolor: theme.palette.mode === 'dark' ? '#774BF3' : 'primary.dark',
                                        }
                                    }}
                                >
                                    Create Your First Snippet
                                </Button>
                            </Box>
                        ) : (
                            <List disablePadding>
                                {snippets.map((snippet, index) => {
                                    // Check if snippet is expired/accessible
                                    const isExpired = !snippet.isAccessible;

                                    return (
                                        <React.Fragment key={snippet.uuid}>
                                            {index > 0 && <Divider component="li" sx={{ borderColor: 'rgba(188, 156, 255, 0.1)' }} />}
                                            <ListItem
                                                alignItems="flex-start"
                                                button={!isExpired}
                                                onClick={!isExpired ? () => navigate(`/code/${snippet.uuid}`) : undefined}
                                                sx={{
                                                    p: 2,
                                                    opacity: isExpired ? 0.6 : 1,
                                                    cursor: isExpired ? 'default' : 'pointer',
                                                    '&:hover': {
                                                        bgcolor: !isExpired ? (theme.palette.mode === 'dark' ? 'rgba(255, 255, 255, 0.03)' : 'rgba(0, 0, 0, 0.02)') : 'transparent',
                                                    }
                                                }}
                                            >
                                                <ListItemText
                                                    primary={
                                                        <Box display="flex" justifyContent="space-between" mb={1}>
                                                            <Box display="flex" alignItems="center">
                                                                <Typography variant="subtitle1" fontWeight="medium">
                                                                    {snippet.title || 'Untitled Snippet'}
                                                                </Typography>
                                                                {isExpired && (
                                                                    <Chip
                                                                        label="Expired"
                                                                        size="small"
                                                                        icon={<BlockIcon fontSize="small" />}
                                                                        sx={{
                                                                            ml: 2,
                                                                            height: '20px',
                                                                            fontSize: '0.7rem',
                                                                            bgcolor: theme.palette.mode === 'dark' ? 'rgba(220, 50, 50, 0.2)' : 'rgba(220, 50, 50, 0.1)',
                                                                            color: theme.palette.mode === 'dark' ? 'rgba(255, 120, 120, 0.9)' : 'rgba(220, 50, 50, 0.9)',
                                                                        }}
                                                                    />
                                                                )}
                                                            </Box>
                                                            <Typography variant="caption" color="text.secondary">
                                                                {snippet.createdAt ? new Date(snippet.createdAt).toLocaleDateString() : ''}
                                                            </Typography>
                                                        </Box>
                                                    }
                                                    secondary={
                                                        <>
                                                            <Box
                                                                component="pre"
                                                                sx={{
                                                                    p: 1,
                                                                    mt: 1,
                                                                    mb: 1.5,
                                                                    bgcolor: theme.palette.mode === 'dark' ? '#0D0C10' : 'rgba(0, 0, 0, 0.05)',
                                                                    borderRadius: 1,
                                                                    fontSize: '0.75rem',
                                                                    overflow: 'hidden',
                                                                    whiteSpace: 'nowrap',
                                                                    textOverflow: 'ellipsis',
                                                                    color: theme.palette.mode === 'dark' ? 'rgba(255, 255, 255, 0.7)' : 'text.secondary',
                                                                }}
                                                            >
                                                                {snippet.content?.substring(0, 150) || ''}
                                                            </Box>

                                                            <Box display="flex" alignItems="center" justifyContent="space-between">
                                                                <Box display="flex" gap={0.5} flexWrap="wrap">
                                                                    {snippet.tags?.slice(0, 3).map((tag) => (
                                                                        <Chip
                                                                            key={tag}
                                                                            label={tag}
                                                                            size="small"
                                                                            sx={{
                                                                                height: '20px',
                                                                                fontSize: '0.7rem',
                                                                                bgcolor: theme.palette.mode === 'dark' ? 'rgba(22, 21, 28, 0.7)' : 'rgba(0, 0, 0, 0.05)',
                                                                                color: theme.palette.mode === 'dark' ? '#9C95AC' : 'text.secondary',
                                                                            }}
                                                                        />
                                                                    ))}
                                                                    {snippet.tags?.length > 3 && (
                                                                        <Typography variant="caption" color="text.secondary">...</Typography>
                                                                    )}
                                                                </Box>

                                                                {!isExpired && (
                                                                    <Typography
                                                                        variant="caption"
                                                                        sx={{
                                                                            display: 'flex',
                                                                            alignItems: 'center',
                                                                            color: theme.palette.mode === 'dark' ? '#673CE3' : 'primary.main',
                                                                        }}
                                                                    >
                                                                        View Snippet
                                                                        <ChevronRightIcon fontSize="small" />
                                                                    </Typography>
                                                                )}
                                                            </Box>
                                                        </>
                                                    }
                                                />
                                            </ListItem>
                                        </React.Fragment>
                                    );
                                })}
                            </List>
                        )}
                    </Paper>
                </Box>

                {/* Recent Messages and Groups in a 2-column split */}
                <Box sx={{ gridColumn: { xs: 'span 12', md: 'span 6' }, gridRow: { md: 'span 1' } }}>
                    <Paper elevation={0} sx={cardStyle}>
                        <Box
                            sx={{
                                ...cardHeaderStyle,
                                display: 'flex',
                                justifyContent: 'space-between',
                                alignItems: 'center'
                            }}
                        >
                            <Typography variant="h6" fontWeight="bold">
                                Recent Messages
                            </Typography>

                            <Button
                                color="primary"
                                size="small"
                                onClick={() => navigate('/messages')}
                                sx={{
                                    color: theme.palette.mode === 'dark' ? '#673CE3' : 'primary.main',
                                }}
                            >
                                View All
                            </Button>
                        </Box>

                        {messages.length === 0 ? (
                            <Box textAlign="center" py={4} px={2} sx={{ flexGrow: 1, display: 'flex', flexDirection: 'column', justifyContent: 'center' }}>
                                <Typography color="text.secondary" gutterBottom>
                                    No recent messages.
                                </Typography>
                                <Button
                                    variant="outlined"
                                    startIcon={<EmailIcon />}
                                    onClick={() => navigate('/messages/new')}
                                    sx={{
                                        mt: 2,
                                        borderColor: theme.palette.mode === 'dark' ? 'rgba(188, 156, 255, 0.2)' : 'divider',
                                        color: theme.palette.mode === 'dark' ? '#9C95AC' : 'text.secondary',
                                        '&:hover': {
                                            borderColor: theme.palette.mode === 'dark' ? 'rgba(188, 156, 255, 0.3)' : 'primary.main',
                                            bgcolor: 'rgba(188, 156, 255, 0.05)'
                                        }
                                    }}
                                >
                                    Start a Conversation
                                </Button>
                            </Box>
                        ) : (
                            <List disablePadding sx={{ flexGrow: 1 }}>
                                {messages.map((message, index) => (
                                    <React.Fragment key={message.id}>
                                        {index > 0 && <Divider component="li" sx={{ borderColor: 'rgba(188, 156, 255, 0.1)' }} />}
                                        <ListItem
                                            alignItems="flex-start"
                                            button
                                            onClick={() => navigate(`/messages/conversation/${message.senderId}`)}
                                            sx={{
                                                p: 2,
                                                '&:hover': {
                                                    bgcolor: theme.palette.mode === 'dark' ? 'rgba(255, 255, 255, 0.03)' : 'rgba(0, 0, 0, 0.02)',
                                                }
                                            }}
                                        >
                                            <ListItemAvatar>
                                                <Avatar
                                                    sx={{
                                                        bgcolor: getAvatarColor(message.senderName),
                                                    }}
                                                >
                                                    {message.senderName?.charAt(0) || '?'}
                                                </Avatar>
                                            </ListItemAvatar>
                                            <ListItemText
                                                primary={
                                                    <Box display="flex" justifyContent="space-between">
                                                        <Typography variant="subtitle1" fontWeight="medium">
                                                            {message.senderName}
                                                        </Typography>
                                                        <Typography variant="caption" color="text.secondary">
                                                            {new Date(message.sentAt).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                                                        </Typography>
                                                    </Box>
                                                }
                                                secondary={
                                                    <>
                                                        <Typography
                                                            variant="body2"
                                                            color="text.secondary"
                                                            sx={{
                                                                overflow: 'hidden',
                                                                textOverflow: 'ellipsis',
                                                                WebkitLineClamp: 2,
                                                                WebkitBoxOrient: 'vertical',
                                                                display: '-webkit-box'
                                                            }}
                                                        >
                                                            {message.content.substring(0, 100)}{message.content.length > 100 ? '...' : ''}
                                                        </Typography>
                                                        <Typography
                                                            variant="caption"
                                                            component="div"
                                                            sx={{
                                                                mt: 1,
                                                                color: theme.palette.mode === 'dark' ? '#673CE3' : 'primary.main',
                                                                display: 'flex',
                                                                alignItems: 'center'
                                                            }}
                                                        >
                                                            View Conversation
                                                            <ChevronRightIcon fontSize="small" />
                                                        </Typography>
                                                    </>
                                                }
                                            />
                                        </ListItem>
                                    </React.Fragment>
                                ))}
                            </List>
                        )}
                    </Paper>
                </Box>

                {/* My Groups section - matching height with Messages */}
                <Box sx={{ gridColumn: { xs: 'span 12', md: 'span 6' }, gridRow: { md: 'span 1' } }}>
                    <Paper elevation={0} sx={cardStyle}>
                        <Box
                            sx={{
                                ...cardHeaderStyle,
                                display: 'flex',
                                justifyContent: 'space-between',
                                alignItems: 'center'
                            }}
                        >
                            <Typography variant="h6" fontWeight="bold">
                                My Groups
                            </Typography>

                            <Button
                                color="primary"
                                size="small"
                                onClick={() => navigate('/groups')}
                                sx={{
                                    color: theme.palette.mode === 'dark' ? '#673CE3' : 'primary.main',
                                }}
                            >
                                View All
                            </Button>
                        </Box>

                        {groups.length === 0 ? (
                            <Box textAlign="center" py={4} px={2} sx={{ flexGrow: 1, display: 'flex', flexDirection: 'column', justifyContent: 'center' }}>
                                <Typography color="text.secondary" gutterBottom>
                                    You haven't joined any groups yet.
                                </Typography>
                                <Button
                                    variant="outlined"
                                    startIcon={<GroupIcon />}
                                    onClick={() => navigate('/groups/new')}
                                    sx={{
                                        mt: 2,
                                        borderColor: theme.palette.mode === 'dark' ? 'rgba(188, 156, 255, 0.2)' : 'divider',
                                        color: theme.palette.mode === 'dark' ? '#9C95AC' : 'text.secondary',
                                        '&:hover': {
                                            borderColor: theme.palette.mode === 'dark' ? 'rgba(188, 156, 255, 0.3)' : 'primary.main',
                                            bgcolor: 'rgba(188, 156, 255, 0.05)'
                                        }
                                    }}
                                >
                                    Create a Group
                                </Button>
                            </Box>
                        ) : (
                            <List disablePadding sx={{ flexGrow: 1 }}>
                                {groups.map((group, index) => (
                                    <React.Fragment key={group.id}>
                                        {index > 0 && <Divider component="li" sx={{ borderColor: 'rgba(188, 156, 255, 0.1)' }} />}
                                        <ListItem
                                            alignItems="flex-start"
                                            button
                                            onClick={() => navigate(`/groups/${group.id}`)}
                                            sx={{
                                                p: 2,
                                                '&:hover': {
                                                    bgcolor: theme.palette.mode === 'dark' ? 'rgba(255, 255, 255, 0.03)' : 'rgba(0, 0, 0, 0.02)',
                                                }
                                            }}
                                        >
                                            <ListItemAvatar>
                                                <Avatar
                                                    sx={{
                                                        bgcolor: getAvatarColor(group.name),
                                                    }}
                                                >
                                                    {group.name?.charAt(0) || 'G'}
                                                </Avatar>
                                            </ListItemAvatar>
                                            <ListItemText
                                                primary={
                                                    <Box display="flex" justifyContent="space-between">
                                                        <Typography variant="subtitle1" fontWeight="medium">
                                                            {group.name}
                                                        </Typography>
                                                        <Chip
                                                            label={group.role}
                                                            size="small"
                                                            sx={{
                                                                height: '24px',
                                                                bgcolor: theme.palette.mode === 'dark' ? 'rgba(22, 21, 28, 0.7)' : 'rgba(0, 0, 0, 0.05)',
                                                                color: theme.palette.mode === 'dark' ? '#9C95AC' : 'text.secondary',
                                                            }}
                                                        />
                                                    </Box>
                                                }
                                                secondary={
                                                    <>
                                                        <Typography
                                                            variant="body2"
                                                            color="text.secondary"
                                                        >
                                                            {group.memberCount} members • Created {new Date(group.createdAt).toLocaleDateString()}
                                                        </Typography>
                                                        <Typography
                                                            variant="caption"
                                                            component="div"
                                                            sx={{
                                                                mt: 1,
                                                                color: theme.palette.mode === 'dark' ? '#673CE3' : 'primary.main',
                                                                display: 'flex',
                                                                alignItems: 'center'
                                                            }}
                                                        >
                                                            View Group
                                                            <ChevronRightIcon fontSize="small" />
                                                        </Typography>
                                                    </>
                                                }
                                            />
                                        </ListItem>
                                    </React.Fragment>
                                ))}
                            </List>
                        )}
                    </Paper>
                </Box>
            </Box>
        </Container>
    );
};

export default DashboardPage;

================
File: pages/GroupDetailPage.jsx
================
import React, { useState, useEffect } from 'react';
import { useParams, useNavigate, Link as RouterLink } from 'react-router-dom';
import { groupService, snippetService } from '../services/api';
import { useAuth } from '../contexts/AuthContext';
import {
    Container, Paper, Box, Grid, Typography, List, ListItem,
    ListItemAvatar, ListItemText, Avatar, IconButton, TextField,
    Button, CircularProgress, Alert, Divider, Tooltip, Chip,
    Dialog, DialogActions, DialogContent, DialogTitle, RadioGroup,
    FormControlLabel, Radio, ListItemButton, useTheme
} from '@mui/material';
import {
    ArrowBack as ArrowBackIcon, Group as GroupIcon, PersonAdd as PersonAddIcon,
    Delete as DeleteIcon, AdminPanelSettings as AdminPanelSettingsIcon,
    Person as PersonIcon, Code as CodeIcon, Add as AddIcon, Share as ShareIcon,
    Close as CloseIcon, Link as LinkIcon
} from '@mui/icons-material';

// --- Helper Functions (Keep as before) ---
const getAvatarInfo = (name) => {
    const initials = name ? name.split(' ').map(n => n[0]).join('').toUpperCase().substring(0, 2) : '?';
    let hash = 0;
    for (let i = 0; i < (name?.length || 0); i++) {
        hash = name.charCodeAt(i) + ((hash << 5) - hash);
    }
    const colors = ['#e91e63', '#9c27b0', '#673ab7', '#3f51b5', '#2196f3', '#03a9f4', '#00bcd4', '#009688'];
    const color = colors[Math.abs(hash) % colors.length];
    return { initials, color };
};

const formatDate = (dateString) => {
    if (!dateString) return '';
    return new Date(dateString).toLocaleDateString([], { year: 'numeric', month: 'short', day: 'numeric' });
};

// --- Group Detail Page Component ---
const GroupDetailPage = () => {
    const { id: groupId } = useParams(); // Rename id to groupId for clarity
    const { currentUser } = useAuth();
    const navigate = useNavigate();
    const theme = useTheme();
    const [sharedSnippets, setSharedSnippets] = useState([]);

    // State for Group Details
    const [group, setGroup] = useState(null);
    const [members, setMembers] = useState([]);
    const [newMemberEmail, setNewMemberEmail] = useState('');
    const [isCurrentUserCreator, setIsCurrentUserCreator] = useState(false);

    // State for Snippets
    const [groupSnippets, setGroupSnippets] = useState([]); // Holds snippets shared *to* this group
    const [userSnippets, setUserSnippets] = useState([]); // Holds the current user's own snippets for selection
    const [selectedSnippetId, setSelectedSnippetId] = useState(null); // ID of snippet selected in the modal

    // State for UI Control
    const [loading, setLoading] = useState(true);
    const [addingMember, setAddingMember] = useState(false);
    const [loadingUserSnippets, setLoadingUserSnippets] = useState(false);
    const [sharingSnippet, setSharingSnippet] = useState(false);
    const [isShareModalOpen, setIsShareModalOpen] = useState(false);

    // State for Errors
    const [error, setError] = useState(null);
    const [addMemberError, setAddMemberError] = useState('');
    const [shareError, setShareError] = useState('');


    // --- Styles (Keep as before) ---
    const cardStyle = {
        borderRadius: 3,
        bgcolor: theme.palette.mode === 'dark' ? '#16151C' : 'background.paper',
        border: '1px solid',
        borderColor: theme.palette.mode === 'dark' ? 'rgba(188, 156, 255, 0.1)' : 'divider',
        overflow: 'hidden',
        height: '100%', // Make card fill grid height
        display: 'flex', // Enable flexbox for vertical stretching
        flexDirection: 'column' // Stack header, content, footer vertically
    };
    const cardHeaderStyle = {
        p: 2.5,
        borderBottom: '1px solid',
        borderColor: theme.palette.mode === 'dark' ? 'rgba(13, 12, 16, 1)' : 'divider',
        display: 'flex',
        alignItems: 'center',
        gap: 1.5,
        flexShrink: 0 // Prevent header from shrinking
    };
    const cardContentStyle = {
        flexGrow: 1, // Allow content area to grow
        overflow: 'auto', // Add scroll if content overflows
        p: 0 // Remove padding for List/Box inside
    };
    const cardFooterStyle = {
        p: 2.5,
        borderTop: '1px solid',
        borderColor: theme.palette.mode === 'dark' ? 'rgba(13, 12, 16, 1)' : 'divider',
        flexShrink: 0 // Prevent footer from shrinking
    };


    // --- Data Fetching ---
    useEffect(() => {
        const fetchGroupData = async () => {
            try {
                setLoading(true);
                setError(null);

                // Fetch group members
                const memberData = await groupService.getGroupDetails(groupId);
                if (memberData.success) {
                    setGroup({ id: memberData.groupId, name: memberData.groupName });
                    const creator = memberData.members?.find(m => m.isCreator);
                    const isCreator = creator?.uuid === currentUser?.uuid;
                    setIsCurrentUserCreator(isCreator);
                    setMembers(memberData.members || []);
                } else {
                    throw new Error(memberData.message || 'Failed to load group members');
                }

                // Fetch shared snippets
                try {
                    const snippetsData = await groupService.getGroupSnippets(groupId);
                    if (snippetsData.success) {
                        setGroupSnippets(snippetsData.snippets || []);

                        // Track which snippets are already shared to disable them in the sharing dialog
                        const sharedIds = snippetsData.snippets.map(snippet => snippet.id);
                        setSharedSnippets(sharedIds);
                    }
                } catch (err) {
                    console.warn("Error fetching shared snippets:", err);
                    // Don't block page loading if this fails
                }

                // Fetch user's own snippets for the sharing dialog
                try {
                    const userSnippetsData = await snippetService.getUserSnippets();
                    if (userSnippetsData.success) {
                        const accessibleSnippets = userSnippetsData.snippets?.filter(s => s.isAccessible === true) || [];
                        setUserSnippets(accessibleSnippets);
                    }
                } catch (err) {
                    console.warn("Error fetching user snippets:", err);
                    // Don't block page loading if this fails
                }

            } catch (err) {
                setError(err.message || 'An error occurred loading group data');
                setGroup(null); // Reset group info on error
                setMembers([]);
                setGroupSnippets([]);
            } finally {
                setLoading(false);
            }
        };

        if (groupId && currentUser) {
            fetchGroupData();
        }
    }, [groupId, currentUser]); // Dependencies


    // --- Event Handlers ---
    const handleAddMember = async (e) => {
        e.preventDefault();
        if (!newMemberEmail.trim()) {
            setAddMemberError('Email is required'); return;
        }
        try {
            setAddingMember(true); setAddMemberError('');
            const result = await groupService.addMember(groupId, newMemberEmail.trim());
            if (result.success) {
                await fetchGroupData(); // Refresh members list
                setNewMemberEmail('');
            } else { setAddMemberError(result.message || 'Failed to add member'); }
        } catch (err) { setAddMemberError(err.message || 'An error occurred');
        } finally { setAddingMember(false); }
    };

    const handleRemoveMember = async (userIdToRemove, username) => {
        if (!window.confirm(`Are you sure you want to remove ${username} from the group?`)) return;
        try {
            const result = await groupService.removeMember(groupId, userIdToRemove);
            if (result.success) {
                setMembers(prevMembers => prevMembers.filter(member => member.id !== userIdToRemove));
            } else { setError(result.message || 'Failed to remove member'); } // Show main error
        } catch (err) { setError(err.message || 'An error occurred removing member'); }
    };

    // --- Share Snippet Modal Handlers ---
    const handleOpenShareModal = async () => {
        setIsShareModalOpen(true);
        setShareError('');
        setSelectedSnippetId(null); // Reset selection
        setLoadingUserSnippets(true);

        if (!currentUser) {
            setShareError("You must be logged in to share snippets.");
            setLoadingUserSnippets(false);
            return;
        }

        try {
            console.log("Fetching user snippets...");
            const snippetData = await snippetService.getUserSnippets();
            console.log("API Response for user snippets:", JSON.stringify(snippetData, null, 2));

            if (snippetData && snippetData.success) {
                const fetchedSnippets = snippetData.snippets || [];
                console.log("Snippets fetched from API:", fetchedSnippets);

                // Filter accessible snippets
                const accessibleSnippets = fetchedSnippets.filter(s => s.isAccessible === true);
                console.log("Snippets after accessibility filter:", accessibleSnippets);

                setUserSnippets(accessibleSnippets);

                if (accessibleSnippets.length === 0) {
                    if (fetchedSnippets.length > 0) {
                        console.warn("Snippets were fetched, but none were marked as accessible by the backend.");
                        setShareError("You have snippets, but none are currently accessible to share.");
                    }
                }
            } else {
                setShareError(snippetData?.message || "Could not load your snippets (API Error).");
            }
        } catch (err) {
            console.error("Error fetching user snippets:", err);
            setShareError(err.message || "An error occurred fetching your snippets.");
        } finally {
            setLoadingUserSnippets(false);
        }
    };

    const handleCloseShareModal = () => {
        if (!sharingSnippet) { // Prevent closing while sharing is in progress
            setIsShareModalOpen(false);
        }
    };

    const handleSelectSnippet = (event) => {
        const selectedId = event.target.value;
        console.log("Selected snippet ID:", selectedId);
        setSelectedSnippetId(selectedId); // Store as string
    };

    const handleConfirmShare = async () => {
        if (!selectedSnippetId) {
            setShareError("Please select a snippet to share.");
            return;
        }

        setSharingSnippet(true);
        setShareError('');

        try {
            console.log(`Sharing snippet with ID ${selectedSnippetId} to group ${groupId}`);

            // Find the snippet from our local state
            const snippetToShare = userSnippets.find(s => String(s.id) === selectedSnippetId);

            if (!snippetToShare) {
                throw new Error(`Could not find snippet with ID ${selectedSnippetId}`);
            }

            // Make the API call to share the snippet
            const result = await groupService.shareSnippet(groupId, snippetToShare.id);

            if (result.success) {
                // Update our local state to show the newly shared snippet
                if (!sharedSnippets.some(id => id === snippetToShare.id)) {
                    // Add to shared snippets tracking
                    setSharedSnippets(prev => [...prev, snippetToShare.id]);

                    // Add to displayed snippets
                    const newSnippet = {
                        ...snippetToShare,
                        sharedAt: new Date().toISOString(),
                        sharedBy: {
                            id: currentUser.id,
                            username: currentUser.username,
                            uuid: currentUser.uuid
                        }
                    };

                    setGroupSnippets(prev => [newSnippet, ...prev]);
                }

                handleCloseShareModal(); // Close the modal
            } else {
                setShareError(result.message || "Failed to share snippet");
            }

        } catch (err) {
            console.error("Error sharing snippet:", err);
            setShareError(err.message || "Failed to share snippet");
        } finally {
            setSharingSnippet(false);
        }
    };


    // --- Render Logic ---
    if (loading && !group) { // Show loading only on initial load
        return <Box display="flex" justifyContent="center" alignItems="center" minHeight="60vh"><CircularProgress /></Box>;
    }

    if (error && !group) { // Show full page error only if group data failed entirely
        return (
            <Container maxWidth="sm" sx={{ py: 6, textAlign: 'center' }}>
                <Paper sx={{ ...cardStyle, p: 4, height: 'auto' }}> {/* Override height for error */}
                    <Typography variant="h5" color="error" gutterBottom>Error Loading Group</Typography>
                    <Typography color="text.secondary" sx={{ mb: 3 }}>{error}</Typography>
                    <Button variant="contained" onClick={() => navigate('/groups')}>Back to Groups</Button>
                </Paper>
            </Container>
        );
    }

    return (
        <Container maxWidth="lg" sx={{ py: 4, px: { xs: 2, sm: 3 }, zIndex: 5, position: 'relative' }}>
            {/* Header */}
            <Box display="flex" alignItems="center" mb={3}>
                <IconButton onClick={() => navigate('/groups')} sx={{ mr: 1.5 }}><ArrowBackIcon /></IconButton>
                <Typography variant="h4" fontWeight="bold">{group?.name || 'Group Details'}</Typography>
                {error && !loading && ( /* Show non-critical errors */
                    <Alert severity="warning" sx={{ ml: 'auto', py: 0.5, px: 1.5 }} onClose={() => setError(null)}>{error}</Alert>
                )}
            </Box>

            <Grid container spacing={3} sx={{ alignItems: 'stretch' }}> {/* Add alignItems stretch */}
                {/* Members Section */}
                <Grid item xs={12} md={4} sx={{ display: 'flex' }}>
                    <Paper elevation={0} sx={cardStyle}>
                        <Box sx={cardHeaderStyle}>
                            <GroupIcon sx={{ color: theme.palette.primary.light }} />
                            <Typography variant="h6" fontWeight="bold">Members ({members.length})</Typography>
                        </Box>
                        {/* Apply cardContentStyle to the container of the List */}
                        <Box sx={cardContentStyle}>
                            <List sx={{ p: 0 }}> {/* Remove List padding */}
                                {members.map((member, index) => {
                                    const { initials, color } = getAvatarInfo(member.username);
                                    return (
                                        <React.Fragment key={member.id || member.uuid}> {/* Use UUID if ID isn't available */}
                                            <ListItem /* No secondaryAction here, handled below */ sx={{ px: 2.5, py: 1.5 }}>
                                                <ListItemAvatar sx={{ minWidth: 48 }}>
                                                    <Avatar sx={{ bgcolor: color, width: 36, height: 36 }}>{initials}</Avatar>
                                                </ListItemAvatar>
                                                <ListItemText
                                                    primary={
                                                        <Box display="flex" alignItems="center" gap={1}>
                                                            <Typography variant="body1" fontWeight="medium" noWrap>{member.username} {member.uuid === currentUser?.uuid && '(You)'}</Typography>
                                                            {member.isCreator && <Chip icon={<AdminPanelSettingsIcon fontSize="small" />} label="Owner" size="small" color="primary" variant="outlined" sx={{ height: 20, fontSize: '0.7rem', ml: 1 }} />}
                                                        </Box>
                                                    }
                                                    secondary={`Joined: ${formatDate(member.joinedAt)}`}
                                                    secondaryTypographyProps={{ variant: 'caption', color: 'text.secondary' }}
                                                />
                                                {isCurrentUserCreator && !member.isCreator && (
                                                    <Tooltip title="Remove Member">
                                                        <IconButton edge="end" onClick={() => handleRemoveMember(member.id, member.username)} size="small">
                                                            <DeleteIcon fontSize="small" color="error" />
                                                        </IconButton>
                                                    </Tooltip>
                                                )}
                                            </ListItem>
                                            {index < members.length - 1 && <Divider component="li" sx={{ borderColor: 'rgba(188, 156, 255, 0.05)', mx: 2.5 }} />}
                                        </React.Fragment>
                                    );
                                })}
                            </List>
                        </Box>
                        {/* Add Member Form */}
                        {isCurrentUserCreator && (
                            <Box sx={cardFooterStyle}> {/* Use cardFooterStyle */}
                                <Typography variant="subtitle1" fontWeight="medium" mb={1.5}>Add Member</Typography>
                                {addMemberError && <Alert severity="error" sx={{ mb: 1.5, fontSize: '0.8rem', py: 0.2 }} onClose={() => setAddMemberError('')}>{addMemberError}</Alert>}
                                <Box component="form" onSubmit={handleAddMember} display="flex" gap={1.5}>
                                    <TextField label="Email" variant="outlined" size="small" fullWidth type="email" value={newMemberEmail} onChange={(e) => setNewMemberEmail(e.target.value)} placeholder="user@example.com" disabled={addingMember} />
                                    <Button type="submit" variant="contained" size="medium" disabled={addingMember || !newMemberEmail.trim()} sx={{ minWidth: 50, px: 1.5 }}>
                                        {addingMember ? <CircularProgress size={20} color="inherit" /> : <PersonAddIcon fontSize="small" />}
                                    </Button>
                                </Box>
                            </Box>
                        )}
                    </Paper>
                </Grid>

                {/* Shared Snippets Section */}
                <Grid item xs={12} md={8} sx={{ display: 'flex' }}>
                    <Paper elevation={0} sx={cardStyle}>
                        <Box sx={cardHeaderStyle} justifyContent="space-between">
                            <Box display="flex" alignItems="center" gap={1.5}>
                                <CodeIcon sx={{ color: theme.palette.primary.light }} />
                                <Typography variant="h6" fontWeight="bold">Shared Snippets</Typography>
                            </Box>
                            <Button
                                variant="outlined"
                                size="small"
                                startIcon={<ShareIcon />}
                                onClick={handleOpenShareModal} // Open the modal
                                disabled={loading} // Disable if main page is loading
                                sx={{
                                    borderColor: theme.palette.mode === 'dark' ? 'rgba(188, 156, 255, 0.2)' : 'divider',
                                    color: theme.palette.mode === 'dark' ? '#9C95AC' : 'text.secondary',
                                    '&:hover': { bgcolor: 'rgba(188, 156, 255, 0.05)' }
                                }}
                            >
                                Share Snippet
                            </Button>
                        </Box>
                        {/* Apply cardContentStyle here */}
                        <Box sx={cardContentStyle}>
                            {/* TODO: Add loading state for group snippets if fetching separately */}
                            {groupSnippets.length === 0 ? (
                                <Box display="flex" flexDirection="column" justifyContent="center" alignItems="center" textAlign="center" p={3} height="100%" sx={{ color: 'text.secondary' }}>
                                    <CodeIcon sx={{ fontSize: 48, mb: 2, color: 'rgba(188, 156, 255, 0.2)' }} />
                                    <Typography variant="subtitle1" gutterBottom>No snippets shared yet.</Typography>
                                    <Typography variant="body2">Click "Share Snippet" to add one.</Typography>
                                </Box>
                            ) : (
                                <List sx={{ p: 0 }}>
                                    {groupSnippets.map((snippet, index) => (
                                        <React.Fragment key={snippet.uuid}>
                                            <ListItem
                                                secondaryAction={
                                                    <Tooltip title="View Snippet">
                                                        <IconButton edge="end" component={RouterLink} to={`/code/${snippet.uuid}`} size="small">
                                                            <LinkIcon fontSize="small" />
                                                        </IconButton>
                                                    </Tooltip>
                                                }
                                                sx={{ px: 2.5, py: 1.5 }}
                                            >
                                                {/* You might want an icon or avatar here too */}
                                                <ListItemText
                                                    primary={snippet.title || 'Untitled Snippet'}
                                                    secondary={`Created: ${formatDate(snippet.createdAt)} ${snippet.author?.username ? `by ${snippet.author.username}` : ''}`}
                                                    primaryTypographyProps={{ fontWeight: 'medium', noWrap: true }}
                                                    secondaryTypographyProps={{ variant: 'caption', color: 'text.secondary' }}
                                                />
                                                {/* TODO: Add a 'Remove Share' button if needed (requires backend) */}
                                            </ListItem>
                                            {index < groupSnippets.length - 1 && <Divider component="li" sx={{ borderColor: 'rgba(188, 156, 255, 0.05)', mx: 2.5 }} />}
                                        </React.Fragment>
                                    ))}
                                </List>
                            )}
                        </Box>
                    </Paper>
                </Grid>
            </Grid>

            {/* Share Snippet Dialog (Modal) */}
            <Dialog open={isShareModalOpen} onClose={handleCloseShareModal} fullWidth maxWidth="sm">
                <DialogTitle sx={{ pb: 1 }}>
                    Share a Snippet with {group?.name}
                    <IconButton onClick={handleCloseShareModal} sx={{ position: 'absolute', right: 8, top: 8 }}>
                        <CloseIcon />
                    </IconButton>
                </DialogTitle>
                <DialogContent dividers sx={{ p: 0 }}>
                    {shareError && <Alert severity="error" sx={{ m: 2 }}>{shareError}</Alert>}

                    {loadingUserSnippets ? (
                        <Box display="flex" justifyContent="center" py={4}><CircularProgress /></Box>
                    ) : userSnippets.length === 0 ? (
                        <Typography sx={{ p: 3, textAlign: 'center', color: 'text.secondary' }}>
                            {shareError ? shareError : "You don't have any accessible snippets to share."}
                            {!shareError && <><br /><RouterLink to="/code/new">Create one first?</RouterLink></>}
                        </Typography>
                    ) : (
                        <RadioGroup
                            value={selectedSnippetId || ""}
                            onChange={handleSelectSnippet}
                            name="snippet-selection"
                        >
                            <List disablePadding>
                                {userSnippets.map((snippet) => {
                                    // Create a string ID for consistent comparison
                                    const snippetId = String(snippet.id);
                                    const isSelected = selectedSnippetId === snippetId;
                                    const isAlreadyShared = sharedSnippets.some(id => id === snippet.id);

                                    return (
                                        <ListItem
                                            key={snippet.id || snippet.uuid}
                                            dense
                                            sx={{
                                                px: 3,
                                                py: 1,
                                                '&:hover': { bgcolor: 'action.hover' },
                                                bgcolor: isSelected ? 'rgba(103, 60, 227, 0.08)' : 'transparent'
                                            }}
                                        >
                                            <FormControlLabel
                                                value={snippetId}
                                                control={
                                                    <Radio
                                                        size="small"
                                                        disabled={isAlreadyShared}
                                                    />
                                                }
                                                label={
                                                    <Box>
                                                        <Typography variant="body2" fontWeight="medium">
                                                            {snippet.title || 'Untitled Snippet'}
                                                            {isAlreadyShared && (
                                                                <Chip
                                                                    size="small"
                                                                    label="Already Shared"
                                                                    sx={{ ml: 1, height: 20, fontSize: '0.7rem' }}
                                                                />
                                                            )}
                                                        </Typography>
                                                        <Typography variant="caption" color="text.secondary">
                                                            Created: {formatDate(snippet.createdAt)}
                                                        </Typography>
                                                    </Box>
                                                }
                                                sx={{ flexGrow: 1, mr: 0 }}
                                                disabled={isAlreadyShared}
                                            />
                                        </ListItem>
                                    );
                                })}
                            </List>
                        </RadioGroup>
                    )}
                </DialogContent>
                <DialogActions sx={{ px: 3, py: 2 }}>
                    <Button onClick={handleCloseShareModal} disabled={sharingSnippet}>
                        Cancel
                    </Button>
                    <Button
                        onClick={handleConfirmShare}
                        variant="contained"
                        disabled={!selectedSnippetId || loadingUserSnippets || sharingSnippet}
                        sx={{ minWidth: 100 }}
                    >
                        {sharingSnippet ? <CircularProgress size={24} color="inherit" /> : 'Share'}
                    </Button>
                </DialogActions>
            </Dialog>

        </Container>
    );
};

export default GroupDetailPage;

================
File: pages/GroupsListPage.jsx
================
import React, { useState, useEffect } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { groupService } from '../services/api';
import {
    Container,
    Paper,
    Box,
    Typography,
    List,
    ListItem,
    ListItemText,
    ListItemSecondaryAction,
    Button,
    Chip,
    CircularProgress,
    Alert,
    Divider,
    IconButton,
    Tooltip,
    useTheme
} from '@mui/material';
import {
    Group as GroupIcon,
    Add as AddIcon,
    ChevronRight as ChevronRightIcon,
    AdminPanelSettings as AdminPanelSettingsIcon, // For Owner
    Person as PersonIcon // For Member
} from '@mui/icons-material';

const formatDate = (dateString) => {
    if (!dateString) return '';
    return new Date(dateString).toLocaleDateString([], { year: 'numeric', month: 'short', day: 'numeric' });
};

const GroupsListPage = () => {
    const [groups, setGroups] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const navigate = useNavigate();
    const theme = useTheme();

    // Consistent card styles (applied to the main Paper container)
    const cardStyle = {
        borderRadius: 3,
        bgcolor: theme.palette.mode === 'dark' ? '#16151C' : 'background.paper',
        border: '1px solid',
        borderColor: theme.palette.mode === 'dark' ? 'rgba(188, 156, 255, 0.1)' : 'divider',
        overflow: 'hidden', // Ensures children adhere to border radius
    };

    const cardHeaderStyle = {
        p: 2.5,
        borderBottom: '1px solid',
        borderColor: theme.palette.mode === 'dark' ? 'rgba(13, 12, 16, 1)' : 'divider',
        display: 'flex',
        justifyContent: 'space-between',
        alignItems: 'center',
        gap: 1.5, // Add gap if items wrap
    };


    useEffect(() => {
        const fetchGroups = async () => {
            try {
                setLoading(true);
                setError(null);
                const data = await groupService.getMyGroups();
                if (data.success) {
                    setGroups(data.groups || []);
                } else {
                    setError(data.message || 'Failed to load groups');
                }
            } catch (err) {
                setError(err.message || 'An error occurred');
            } finally {
                setLoading(false);
            }
        };
        fetchGroups();
    }, []);

    return (
        <Container maxWidth="md" sx={{ py: 4, px: { xs: 2, sm: 3 }, zIndex: 5, position: 'relative' }}>
            <Paper elevation={0} sx={cardStyle}>
                {/* Header */}
                <Box sx={cardHeaderStyle}>
                    <Box display="flex" alignItems="center" gap={1.5}>
                        <GroupIcon sx={{ color: theme.palette.primary.main }} />
                        <Typography variant="h6" fontWeight="bold">My Groups</Typography>
                    </Box>
                    <Button
                        variant="contained"
                        startIcon={<AddIcon />}
                        onClick={() => navigate('/groups/new')}
                        sx={{
                            bgcolor: theme.palette.mode === 'dark' ? '#673CE3' : 'primary.main',
                            '&:hover': { bgcolor: theme.palette.mode === 'dark' ? '#774BF3' : 'primary.dark' }
                        }}
                    >
                        Create Group
                    </Button>
                </Box>

                {/* Loading State */}
                {loading && (
                    <Box display="flex" justifyContent="center" alignItems="center" py={6}>
                        <CircularProgress size={32} sx={{ color: theme.palette.primary.main }} />
                    </Box>
                )}

                {/* Error State */}
                {!loading && error && (
                    <Box p={3}>
                        <Alert severity="error">{error}</Alert>
                    </Box>
                )}

                {/* Empty State */}
                {!loading && !error && groups.length === 0 && (
                    <Box textAlign="center" py={8} px={3}>
                        <GroupIcon sx={{ fontSize: 48, mb: 2, color: 'rgba(188, 156, 255, 0.2)' }} />
                        <Typography variant="h6" gutterBottom>No groups found</Typography>
                        <Typography variant="body2" color="text.secondary" sx={{ mb: 3 }}>
                            You haven't created or joined any groups yet.
                        </Typography>
                        <Button
                            variant="outlined"
                            startIcon={<AddIcon />}
                            onClick={() => navigate('/groups/new')}
                        >
                            Create Your First Group
                        </Button>
                    </Box>
                )}

                {/* Groups List */}
                {!loading && !error && groups.length > 0 && (
                    <List disablePadding>
                        {groups.map((group, index) => (
                            <React.Fragment key={group.id}>
                                <ListItem
                                    button // Make list item clickable
                                    component={Link} // Use react-router Link
                                    to={`/groups/${group.id}`} // Link destination
                                    sx={{
                                        px: 2.5,
                                        py: 2, // Increase padding
                                        '&:hover': { bgcolor: theme.palette.mode === 'dark' ? 'rgba(255, 255, 255, 0.03)' : 'rgba(0, 0, 0, 0.02)'}
                                    }}
                                >
                                    <ListItemText
                                        primary={
                                            <Box display="flex" justifyContent="space-between" alignItems="center" mb={0.5}>
                                                <Typography variant="body1" fontWeight="medium" sx={{ mr: 1 }}>
                                                    {group.name}
                                                </Typography>
                                                <Chip
                                                    icon={group.role === 'creator' ? <AdminPanelSettingsIcon fontSize="small" /> : <PersonIcon fontSize="small" />}
                                                    label={group.role === 'creator' ? 'Owner' : 'Member'}
                                                    size="small"
                                                    variant="outlined"
                                                    sx={{ height: 24, fontSize: '0.75rem' }}
                                                    color={group.role === 'creator' ? 'primary' : 'default'}
                                                />
                                            </Box>
                                        }
                                        secondary={
                                            <Typography variant="body2" color="text.secondary">
                                                {group.memberCount} member{group.memberCount !== 1 ? 's' : ''} • Created {formatDate(group.createdAt)}
                                            </Typography>
                                        }
                                    />
                                    <ListItemSecondaryAction>
                                        <Tooltip title="View Group">
                                            <IconButton
                                                edge="end"
                                                component={Link}
                                                to={`/groups/${group.id}`}
                                                size="small"
                                            >
                                                <ChevronRightIcon />
                                            </IconButton>
                                        </Tooltip>
                                    </ListItemSecondaryAction>
                                </ListItem>
                                {index < groups.length - 1 && <Divider component="li" sx={{ borderColor: 'rgba(188, 156, 255, 0.05)' }} />}
                            </React.Fragment>
                        ))}
                    </List>
                )}
            </Paper>
        </Container>
    );
};

export default GroupsListPage;

================
File: pages/HomePage.jsx
================
import React from 'react';
import { Link } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';
import { Navigate } from 'react-router-dom';

const HomePage = () => {
    const { isAuthenticated } = useAuth();
    // Redirect authenticated users to dashboard
    if (isAuthenticated) {
        return <Navigate to="/dashboard" />;
    }
    return (
        <div className="container" style={{ padding: '3rem 1.5rem' }}>
            <div style={{ maxWidth: '64rem', margin: '0 auto' }}>
                <div className="card">
                    <div style={{ padding: '2rem 2rem', textAlign: 'center' }}>
                        <h1 style={{ fontSize: '2.5rem', fontWeight: 'bold', color: 'white', marginBottom: '1.5rem' }}>
                            Share Code Snippets with <span style={{ color: '#673CE3' }}>Smart Expiration</span>
                        </h1>

                        <p style={{ color: '#9C95AC', fontSize: '1.125rem', marginBottom: '2rem', maxWidth: '36rem', margin: '0 auto 2rem' }}>
                            CodeNest lets you share code snippets with time or view limits. Perfect for sharing sensitive information or temporary solutions.
                        </p>

                        <div style={{ display: 'flex', flexWrap: 'wrap', justifyContent: 'center', gap: '1rem' }}>
                            <Link
                                to="/code/new"
                                className="btn-primary"
                                style={{ padding: '0.75rem 1.5rem' }}
                            >
                                Create Snippet
                            </Link>

                            {/* "View Latest" button removed for privacy reasons */}
                        </div>
                    </div>
                </div>

                {/* Features section */}
                <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))', gap: '1.5rem', marginTop: '3rem' }}>
                    <FeatureCard
                        title="Time-Based Expiry"
                        description="Set your code snippets to automatically vanish after a specific time period, ensuring sensitive data doesn't linger."
                        icon="⏱️"
                    />
                    <FeatureCard
                        title="View Limits"
                        description="Allow your snippet to be viewed only a certain number of times before it permanently vanishes."
                        icon="👁️"
                    />
                    <FeatureCard
                        title="End-to-End Security"
                        description="Your code snippets are encrypted and secure, vanishing completely once they've expired."
                        icon="🔒"
                    />
                </div>
            </div>
        </div>
    );
};

const FeatureCard = ({ title, description, icon }) => {
    return (
        <div className="card" style={{ padding: '1.5rem', transition: 'transform 0.2s, box-shadow 0.2s' }}>
            <div style={{ fontSize: '2rem', marginBottom: '1rem' }}>{icon}</div>
            <h3 style={{ fontSize: '1.25rem', fontWeight: 'bold', color: 'white', marginBottom: '0.75rem' }}>{title}</h3>
            <p style={{ color: '#9C95AC' }}>{description}</p>
        </div>
    );
};

export default HomePage;

================
File: pages/LatestSnippetsPage.jsx
================
import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';

const LatestSnippetsPage = () => {
    const [snippets, setSnippets] = useState([]);
    const [authors, setAuthors] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    useEffect(() => {
        const fetchLatestSnippets = async () => {
            try {
                const data = await snippetService.getLatest();
                setSnippets(data.snippets || []);
                setAuthors(data.authors || []);
            } catch (err) {
                setError(err.message);
            } finally {
                setLoading(false);
            }
        };

        fetchLatestSnippets();
    }, []);

    if (loading) {
        return (
            <div style={{ textAlign: 'center', padding: '5rem 0' }}>
                <div style={{ display: 'inline-block', width: '2rem', height: '2rem', borderRadius: '50%', borderTop: '3px solid #673CE3', borderRight: '3px solid transparent', animation: 'spin 1s linear infinite' }}>
                    <style>
                        {`
              @keyframes spin {
                to { transform: rotate(360deg); }
              }
            `}
                    </style>
                </div>
            </div>
        );
    }

    if (error) {
        return (
            <div className="container" style={{ padding: '3rem 1.5rem' }}>
                <div style={{ maxWidth: '64rem', margin: '0 auto', textAlign: 'center' }}>
                    <div className="card" style={{ padding: '2rem' }}>
                        <h2 style={{ fontSize: '1.5rem', fontWeight: 'bold', color: 'white', marginBottom: '1rem' }}>
                            Error Loading Snippets
                        </h2>
                        <p style={{ color: '#9C95AC', marginBottom: '1.5rem' }}>
                            {error}
                        </p>
                        <button
                            onClick={() => window.location.reload()}
                            className="btn-primary"
                        >
                            Try Again
                        </button>
                    </div>
                </div>
            </div>
        );
    }

    return (
        <div className="container" style={{ padding: '3rem 1.5rem' }}>
            <div style={{ maxWidth: '64rem', margin: '0 auto' }}>
                <h1 style={{ fontSize: '2rem', fontWeight: 'bold', color: 'white', marginBottom: '2rem' }}>
                    Latest Code Snippets
                </h1>

                {snippets.length === 0 ? (
                    <div className="card" style={{ padding: '2rem', textAlign: 'center' }}>
                        <p style={{ color: '#9C95AC', marginBottom: '1.5rem' }}>
                            No snippets available yet.
                        </p>
                        <Link to="/code/new" className="btn-primary">
                            Create First Snippet
                        </Link>
                    </div>
                ) : (
                    <div style={{ display: 'flex', flexDirection: 'column', gap: '1.5rem' }}>
                        {snippets.map((snippet, index) => (
                            <div className="card" key={snippet.uuid}>
                                <div className="card-header" style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                                    <h3 style={{ fontSize: '1.25rem', fontWeight: 'bold', color: 'white', margin: 0 }}>
                                        Snippet #{index + 1}
                                    </h3>
                                    <span style={{ color: '#9C95AC' }}>
                    By: <span style={{ color: '#673CE3' }}>{authors[index]?.name || 'Unknown'}</span>
                  </span>
                                </div>
                                <div className="card-body">
                  <pre style={{ backgroundColor: 'rgba(0, 0, 0, 0.25)', padding: '1rem', borderRadius: '0.5rem', overflow: 'auto', margin: '0 0 1rem', maxHeight: '150px' }}>
                    <code>{snippet.code.length > 150 ? `${snippet.code.substring(0, 150)}...` : snippet.code}</code>
                  </pre>
                                    <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                                        <small style={{ color: '#9C95AC' }}>Created: {snippet.date}</small>
                                        <Link to={`/code/${snippet.uuid}`} className="btn-primary">
                                            View Full Snippet
                                        </Link>
                                    </div>
                                </div>
                            </div>
                        ))}
                    </div>
                )}
            </div>
        </div>
    );
};

export default LatestSnippetsPage;

================
File: pages/LoginPage.jsx
================
import React, { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';


const LoginPage = () => {
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [remember, setRemember] = useState(false);
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState('');

    const { login } = useAuth();
    const navigate = useNavigate();

    const handleSubmit = async (e) => {
        e.preventDefault();
        setIsLoading(true);
        setError('');

        try {
            const result = await login(email, password, remember);

            if (result.success) {
                navigate('/');
            } else {
                setError(result.message || 'Login failed');
            }
        } catch (error) {
            setError('An error occurred. Please try again.');
        } finally {
            setIsLoading(false);
        }
    };

    return (
        <div style={{
            width: '100%',
            maxWidth: '100%',
            padding: '3rem 1.5rem',
            display: 'flex',
            justifyContent: 'center'
        }}>
            <div style={{
                width: '100%',
                maxWidth: '28rem'
            }}>
                <div className="card" style={{
                    boxShadow: '0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)',
                    overflow: 'hidden'
                }}>
                    <div className="card-header" style={{
                        textAlign: 'center',
                        padding: '2rem 1.5rem',
                        borderBottom: '1px solid rgba(13, 12, 16, 1)'
                    }}>
                        <h2 style={{ fontSize: '1.75rem', fontWeight: 'bold', color: 'white', margin: 0 }}>Welcome Back</h2>
                        <p style={{ color: '#9C95AC', marginTop: '0.5rem' }}>Enter your credentials to access your account</p>
                    </div>

                    <div style={{
                        padding: '2rem',
                        borderTop: '1px solid rgba(188, 156, 255, 0.1)'
                    }}>
                        {error && (
                            <div style={{ backgroundColor: 'rgba(220, 38, 38, 0.1)', color: '#ef4444', padding: '0.75rem', borderRadius: '0.5rem', marginBottom: '1.5rem', fontSize: '0.875rem' }}>
                                {error}
                            </div>
                        )}

                        <form onSubmit={handleSubmit}>
                            <div style={{ marginBottom: '1.5rem' }}>
                                <label htmlFor="email" style={{ display: 'block', fontSize: '0.875rem', fontWeight: '500', color: '#9C95AC', marginBottom: '0.5rem' }}>
                                    Email
                                </label>
                                <input
                                    type="email"
                                    id="email"
                                    value={email}
                                    onChange={(e) => setEmail(e.target.value)}
                                    style={{
                                        width: '100%',
                                        padding: '0.75rem 1rem',
                                        backgroundColor: 'rgba(22, 21, 28, 0.5)',
                                        border: '1px solid rgba(188, 156, 255, 0.1)',
                                        borderRadius: '0.5rem',
                                        color: 'white',
                                        fontSize: '0.875rem',
                                        boxSizing: 'border-box',
                                        boxShadow: 'inset 0px 2px 1px -1px rgba(255, 255, 255, 0.12), inset 0px 0px 0px 1px rgba(255, 255, 255, 0.05)',
                                        transition: 'border-color 0.2s',
                                        margin: '0'
                                    }}
                                    required
                                    placeholder="you@example.com"
                                />
                            </div>

                            <div style={{ marginBottom: '1.5rem' }}>
                                <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '0.5rem' }}>
                                    <label htmlFor="password" style={{ fontSize: '0.875rem', fontWeight: '500', color: '#9C95AC' }}>
                                        Password
                                    </label>
                                    <a href="#" style={{ fontSize: '0.75rem', color: '#673CE3', textDecoration: 'none' }}>Forgot password?</a>
                                </div>
                                <input
                                    type="password"
                                    id="password"
                                    value={password}
                                    onChange={(e) => setPassword(e.target.value)}
                                    style={{
                                        width: '100%',
                                        padding: '0.75rem 1rem',
                                        backgroundColor: 'rgba(22, 21, 28, 0.5)',
                                        border: '1px solid rgba(188, 156, 255, 0.1)',
                                        borderRadius: '0.5rem',
                                        color: 'white',
                                        fontSize: '0.875rem',
                                        boxSizing: 'border-box',
                                        boxShadow: 'inset 0px 2px 1px -1px rgba(255, 255, 255, 0.12), inset 0px 0px 0px 1px rgba(255, 255, 255, 0.05)',
                                        transition: 'border-color 0.2s',
                                        margin: '0'
                                    }}
                                    required
                                    placeholder="••••••••"
                                />
                            </div>

                            <div style={{ marginBottom: '1.5rem' }}>
                                <label style={{ display: 'flex', alignItems: 'center', cursor: 'pointer' }}>
                                    <input
                                        type="checkbox"
                                        checked={remember}
                                        onChange={(e) => setRemember(e.target.checked)}
                                        style={{
                                            width: '1rem',
                                            height: '1rem',
                                            borderRadius: '0.25rem',
                                            backgroundColor: remember ? '#673CE3' : 'transparent',
                                            border: remember ? '1px solid #673CE3' : '1px solid rgba(188, 156, 255, 0.2)',
                                            appearance: 'none',
                                            cursor: 'pointer',
                                            marginRight: '0.5rem'
                                        }}
                                    />
                                    <span style={{ fontSize: '0.875rem', color: '#9C95AC' }}>Remember me for 30 days</span>
                                </label>
                            </div>

                            <button
                                type="submit"
                                disabled={isLoading}
                                style={{
                                    width: '100%',
                                    padding: '0.75rem',
                                    backgroundColor: '#673CE3',
                                    color: 'white',
                                    fontWeight: '600',
                                    borderRadius: '0.5rem',
                                    border: 'none',
                                    cursor: isLoading ? 'not-allowed' : 'pointer',
                                    opacity: isLoading ? 0.7 : 1,
                                    transition: 'background-color 0.2s, transform 0.1s',
                                    boxShadow: 'inset 0px 2px 1px -1px rgba(255, 255, 255, 0.12), inset 0px 0px 0px 1px rgba(255, 255, 255, 0.05)',
                                    transform: 'translateY(0)',
                                    margin: '0',
                                }}
                                onMouseDown={() => !isLoading && { transform: 'translateY(1px)' }}
                            >
                                {isLoading ? (
                                    <span style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
                    <span style={{
                        display: 'inline-block',
                        width: '1rem',
                        height: '1rem',
                        borderRadius: '50%',
                        borderTop: '2px solid white',
                        borderRight: '2px solid transparent',
                        marginRight: '0.5rem',
                        animation: 'spin 1s linear infinite'
                    }}></span>
                    Logging in...
                  </span>
                                ) : 'Sign in'}
                            </button>
                        </form>

                        <p style={{ textAlign: 'center', color: '#9C95AC', marginTop: '1.5rem', fontSize: '0.875rem' }}>
                            Don't have an account? <Link to="/register" style={{ color: '#673CE3', textDecoration: 'none', fontWeight: '500' }}>Create account</Link>
                        </p>
                    </div>
                </div>
            </div>

            <style>{`
        @keyframes spin {
          to { transform: rotate(360deg); }
        }
        
        input:focus {
          outline: none;
          border-color: #673CE3;
        }
        
        input[type="checkbox"]:checked::after {
          content: "";
          display: block;
          width: 0.375rem;
          height: 0.625rem;
          border: solid white;
          border-width: 0 2px 2px 0;
          transform: rotate(45deg);
          position: relative;
          top: 0.0625rem;
          left: 0.25rem;
        }
      `}</style>
        </div>
    );
};

export default LoginPage;

================
File: pages/MessagesPage.jsx
================
import React, { useState, useEffect } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { messageService } from '../services/api';
import { useAuth } from '../contexts/AuthContext';
import {
    Box,
    Typography,
    Paper,
    List,
    ListItem,
    ListItemAvatar,
    ListItemText,
    Avatar,
    Divider,
    Button,
    Tabs,
    Tab,
    CircularProgress,
    Alert,
    IconButton,
    Container,
    useTheme
} from '@mui/material';
import {
    Add as AddIcon,
    Inbox as InboxIcon,
    Send as SendIcon,
    ChevronRight as ChevronRightIcon
} from '@mui/icons-material';

// Helper to get initials and a consistent avatar color
const getAvatarInfo = (name) => {
    const initials = name ? name.split(' ').map(n => n[0]).join('').toUpperCase().substring(0, 2) : '?';
    // Simple hash function for deterministic color based on name
    let hash = 0;
    for (let i = 0; i < (name?.length || 0); i++) {
        hash = name.charCodeAt(i) + ((hash << 5) - hash);
    }
    const colors = [
        '#e91e63', '#9c27b0', '#673ab7', '#3f51b5',
        '#2196f3', '#03a9f4', '#00bcd4', '#009688'
    ];
    const color = colors[Math.abs(hash) % colors.length];
    return { initials, color };
};

const formatDate = (dateString) => {
    const date = new Date(dateString);
    const today = new Date();
    const yesterday = new Date(today);
    yesterday.setDate(yesterday.getDate() - 1);

    if (date.toDateString() === today.toDateString()) {
        return date.toLocaleTimeString([], { hour: 'numeric', minute: '2-digit' });
    }
    if (date.toDateString() === yesterday.toDateString()) {
        return 'Yesterday';
    }
    if (date.getFullYear() === today.getFullYear()) {
        return date.toLocaleDateString([], { month: 'short', day: 'numeric' });
    }
    return date.toLocaleDateString();
};

const MessagesPage = () => {
    const [activeTab, setActiveTab] = useState('inbox');
    const [messages, setMessages] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const { currentUser } = useAuth();
    const navigate = useNavigate();
    const theme = useTheme();

    useEffect(() => {
        const fetchMessages = async () => {
            try {
                setLoading(true);
                setError(null);
                let data;

                if (activeTab === 'inbox') {
                    data = await messageService.getInbox();
                } else {
                    data = await messageService.getSent();
                }

                if (data.success) {
                    // Group messages by conversation partner
                    const grouped = {};
                    (data.messages || []).forEach(msg => {
                        const partnerId = activeTab === 'inbox' ? msg.senderId : msg.receiverId;
                        const partnerName = activeTab === 'inbox' ? msg.senderName : msg.receiverName;

                        if (!grouped[partnerId]) {
                            grouped[partnerId] = {
                                partnerId: partnerId,
                                partnerName: partnerName,
                                latestMessage: msg.content,
                                sentAt: msg.sentAt,
                                messageId: msg.id,
                                unread: false // Optional: Add unread status logic here
                            };
                        }
                        // Update if this message is newer
                        else if (new Date(msg.sentAt) > new Date(grouped[partnerId].sentAt)) {
                            grouped[partnerId].latestMessage = msg.content;
                            grouped[partnerId].sentAt = msg.sentAt;
                            grouped[partnerId].messageId = msg.id;
                        }
                    });

                    // Sort conversations by latest message date
                    const sortedConversations = Object.values(grouped).sort(
                        (a, b) => new Date(b.sentAt) - new Date(a.sentAt)
                    );

                    setMessages(sortedConversations);
                } else {
                    throw new Error(data.message || 'Failed to load messages');
                }
            } catch (err) {
                setError(err.message || 'An error occurred');
            } finally {
                setLoading(false);
            }
        };

        fetchMessages();
    }, [activeTab]);

    const handleTabChange = (event, newValue) => {
        setActiveTab(newValue);
    };

    return (
        <Container maxWidth="md" sx={{ py: 4 }}>
            <Paper
                elevation={3}
                sx={{
                    borderRadius: 2,
                    overflow: 'hidden',
                    bgcolor: theme.palette.mode === 'dark' ? '#16151C' : 'background.paper',
                    border: '1px solid',
                    borderColor: theme.palette.mode === 'dark' ? 'rgba(188, 156, 255, 0.1)' : 'divider',
                }}
            >
                {/* Header */}
                <Box
                    display="flex"
                    justifyContent="space-between"
                    alignItems="center"
                    px={3}
                    py={2}
                    borderBottom="1px solid"
                    borderColor={theme.palette.mode === 'dark' ? 'rgba(188, 156, 255, 0.1)' : 'divider'}
                >
                    <Box>
                        <Typography variant="h6" fontWeight="bold">Messages</Typography>
                        <Typography variant="body2" color="text.secondary">
                            Manage your conversations
                        </Typography>
                    </Box>
                    <Button
                        variant="contained"
                        color="primary"
                        startIcon={<AddIcon />}
                        onClick={() => navigate('/messages/new')}
                        sx={{
                            bgcolor: theme.palette.mode === 'dark' ? '#673CE3' : 'primary.main',
                            '&:hover': {
                                bgcolor: theme.palette.mode === 'dark' ? '#774BF3' : 'primary.dark',
                            }
                        }}
                    >
                        New Message
                    </Button>
                </Box>

                {/* Error Alert */}
                {error && (
                    <Alert severity="error" sx={{ mx: 3, mt: 2 }}>
                        {error}
                    </Alert>
                )}

                {/* Tabs */}
                <Tabs
                    value={activeTab}
                    onChange={handleTabChange}
                    variant="fullWidth"
                    sx={{
                        borderBottom: '1px solid',
                        borderColor: theme.palette.mode === 'dark' ? 'rgba(188, 156, 255, 0.1)' : 'divider',
                        '& .MuiTab-root': {
                            py: 1.5,
                        }
                    }}
                >
                    <Tab
                        value="inbox"
                        label="Inbox"
                        icon={<InboxIcon fontSize="small" />}
                        iconPosition="start"
                        sx={{
                            textTransform: 'none',
                            fontSize: '0.95rem',
                            fontWeight: 500,
                        }}
                    />
                    <Tab
                        value="sent"
                        label="Sent"
                        icon={<SendIcon fontSize="small" />}
                        iconPosition="start"
                        sx={{
                            textTransform: 'none',
                            fontSize: '0.95rem',
                            fontWeight: 500,
                        }}
                    />
                </Tabs>

                {/* Message List */}
                <Box sx={{ maxHeight: '500px', overflow: 'auto' }}>
                    {loading ? (
                        <Box display="flex" justifyContent="center" alignItems="center" py={6}>
                            <CircularProgress size={32} sx={{ color: '#673CE3' }} />
                        </Box>
                    ) : messages.length === 0 ? (
                        <Box textAlign="center" py={8} px={3}>
                            <Box
                                sx={{
                                    width: 60,
                                    height: 60,
                                    borderRadius: '50%',
                                    bgcolor: 'rgba(103, 60, 227, 0.1)',
                                    display: 'flex',
                                    alignItems: 'center',
                                    justifyContent: 'center',
                                    mx: 'auto',
                                    mb: 2
                                }}
                            >
                                {activeTab === 'inbox' ? (
                                    <InboxIcon sx={{ fontSize: 30, color: 'rgba(103, 60, 227, 0.6)' }} />
                                ) : (
                                    <SendIcon sx={{ fontSize: 30, color: 'rgba(103, 60, 227, 0.6)' }} />
                                )}
                            </Box>
                            <Typography variant="h6" gutterBottom>
                                Your {activeTab} is empty
                            </Typography>
                            <Typography variant="body2" color="text.secondary" sx={{ maxWidth: 400, mx: 'auto', mb: 3 }}>
                                {activeTab === 'inbox'
                                    ? "You haven't received any messages yet."
                                    : "You haven't sent any messages yet."}
                            </Typography>
                            {activeTab === 'inbox' && (
                                <Button
                                    variant="contained"
                                    onClick={() => navigate('/messages/new')}
                                    sx={{
                                        bgcolor: theme.palette.mode === 'dark' ? '#673CE3' : 'primary.main',
                                        '&:hover': {
                                            bgcolor: theme.palette.mode === 'dark' ? '#774BF3' : 'primary.dark',
                                        }
                                    }}
                                >
                                    Start a Conversation
                                </Button>
                            )}
                        </Box>
                    ) : (
                        <List disablePadding>
                            {messages.map((convo) => {
                                const { initials, color } = getAvatarInfo(convo.partnerName);
                                return (
                                    <React.Fragment key={convo.messageId}>
                                        <ListItem
                                            button
                                            alignItems="flex-start"
                                            component={Link}
                                            to={`/messages/conversation/${convo.partnerId}`}
                                            sx={{
                                                px: 3,
                                                py: 2,
                                                position: 'relative',
                                                '&:hover': {
                                                    bgcolor: theme.palette.mode === 'dark' ? 'rgba(255, 255, 255, 0.05)' : 'rgba(0, 0, 0, 0.04)',
                                                },
                                            }}
                                        >
                                            {/* Unread indicator */}
                                            {convo.unread && activeTab === 'inbox' && (
                                                <Box
                                                    sx={{
                                                        position: 'absolute',
                                                        left: 12,
                                                        top: '50%',
                                                        transform: 'translateY(-50%)',
                                                        width: 8,
                                                        height: 8,
                                                        borderRadius: '50%',
                                                        bgcolor: '#673CE3',
                                                        zIndex: 1,
                                                    }}
                                                />
                                            )}

                                            <ListItemAvatar>
                                                <Avatar sx={{ bgcolor: color }}>
                                                    {initials}
                                                </Avatar>
                                            </ListItemAvatar>

                                            <ListItemText
                                                primary={
                                                    <Box display="flex" justifyContent="space-between" alignItems="baseline">
                                                        <Typography variant="body1" fontWeight={500} noWrap sx={{ mr: 2 }}>
                                                            {convo.partnerName}
                                                        </Typography>
                                                        <Typography variant="caption" color="text.secondary">
                                                            {formatDate(convo.sentAt)}
                                                        </Typography>
                                                    </Box>
                                                }
                                                secondary={
                                                    <Typography
                                                        variant="body2"
                                                        color="text.secondary"
                                                        sx={{
                                                            overflow: 'hidden',
                                                            textOverflow: 'ellipsis',
                                                            display: '-webkit-box',
                                                            WebkitLineClamp: 1,
                                                            WebkitBoxOrient: 'vertical',
                                                            mt: 0.5,
                                                            pr: 2, // Make room for the arrow icon
                                                        }}
                                                    >
                                                        {activeTab === 'sent' && <Box component="span" sx={{ color: 'text.disabled', mr: 0.5 }}>You:</Box>}
                                                        {convo.latestMessage}
                                                    </Typography>
                                                }
                                            />

                                            <IconButton
                                                edge="end"
                                                size="small"
                                                sx={{
                                                    color: 'text.disabled',
                                                    alignSelf: 'center',
                                                    ml: 1,
                                                }}
                                                aria-label="view conversation"
                                            >
                                                <ChevronRightIcon />
                                            </IconButton>
                                        </ListItem>
                                        <Divider component="li" />
                                    </React.Fragment>
                                );
                            })}
                        </List>
                    )}
                </Box>

                {/* Help text - only show if there are messages */}
                {messages.length > 0 && (
                    <Box textAlign="center" py={1.5} px={2} borderTop="1px solid" borderColor="divider">
                        <Typography variant="caption" color="text.secondary">
                            Click on a conversation to view and send messages
                        </Typography>
                    </Box>
                )}
            </Paper>
        </Container>
    );
};

export default MessagesPage;

================
File: pages/NewMessagePage.jsx
================
import React, { useState, useEffect } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import { messageService } from '../services/api';

const NewMessagePage = () => {
    const [email, setEmail] = useState('');
    const [content, setContent] = useState('');
    const [selectedSnippet, setSelectedSnippet] = useState(null);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState('');
    const navigate = useNavigate();
    const location = useLocation();

    // Check if a snippet is passed via location state
    useEffect(() => {
        if (location.state?.snippet) {
            setSelectedSnippet(location.state.snippet);
        }
    }, [location]);

    const handleSubmit = async (e) => {
        e.preventDefault();

        if (!email.trim()) {
            setError('Recipient email is required');
            return;
        }

        if (!content.trim()) {
            setError('Message content is required');
            return;
        }

        try {
            setLoading(true);
            setError('');

            // Prepare message data
            const messageData = {
                receiverEmail: email.trim(),
                content: content.trim(),
            };

            // Updated to use UUID instead of ID
            if (selectedSnippet) {
                if (selectedSnippet.uuid) {
                    messageData.snipUuid = selectedSnippet.uuid;
                    console.log("Attaching snippet with UUID:", selectedSnippet.uuid);
                }
            }

            console.log("Sending message data:", messageData);
            const result = await messageService.sendMessage(messageData);

            if (result.success) {
                navigate('/messages');
            } else {
                setError(result.message || 'Failed to send message');
            }
        } catch (err) {
            setError(err.message || 'An error occurred');
        } finally {
            setLoading(false);
        }
    };

    const clearSelectedSnippet = () => {
        setSelectedSnippet(null);
    };

    return (
        <div className="container mx-auto px-4 py-12">
            <div className="max-w-2xl mx-auto">
                <div className="card">
                    <div className="card-header">
                        <h1 className="text-xl font-bold text-white">New Message</h1>
                    </div>

                    <div className="card-body">
                        {error && (
                            <div className="bg-red-900/20 border border-red-700/50 text-red-200 rounded-lg p-4 mb-6 text-sm">
                                {error}
                            </div>
                        )}

                        <form onSubmit={handleSubmit}>
                            <div className="mb-6">
                                <label htmlFor="email" className="block text-sm font-medium text-gray-400 mb-2">
                                    Recipient Email <span className="text-red-500">*</span>
                                </label>
                                <input
                                    type="email"
                                    id="email"
                                    value={email}
                                    onChange={(e) => setEmail(e.target.value)}
                                    className="input-field"
                                    placeholder="user@example.com"
                                    required
                                    disabled={loading}
                                />
                            </div>

                            {selectedSnippet && (
                                <div className="mb-6 p-3 bg-dark rounded-lg border border-orchid/20">
                                    <div className="flex justify-between items-center mb-2">
                                        <h3 className="text-sm font-medium text-white">Attached Snippet</h3>
                                        <button
                                            type="button"
                                            onClick={clearSelectedSnippet}
                                            className="text-primary hover:text-white text-sm"
                                        >
                                            Remove
                                        </button>
                                    </div>
                                    <div className="text-primary text-sm">
                                        {selectedSnippet.title}
                                    </div>
                                </div>
                            )}

                            <div className="mb-6">
                                <label htmlFor="content" className="block text-sm font-medium text-gray-400 mb-2">
                                    Message <span className="text-red-500">*</span>
                                </label>
                                <textarea
                                    id="content"
                                    value={content}
                                    onChange={(e) => setContent(e.target.value)}
                                    className="input-field"
                                    rows={6}
                                    placeholder="Write your message here..."
                                    required
                                    disabled={loading}
                                ></textarea>
                            </div>

                            <div className="flex justify-between">
                                <button
                                    type="button"
                                    onClick={() => navigate('/messages')}
                                    className="btn-secondary"
                                    disabled={loading}
                                >
                                    Cancel
                                </button>

                                <button
                                    type="submit"
                                    disabled={loading || !email.trim() || !content.trim()}
                                    className="btn-primary"
                                >
                                    {loading ? 'Sending...' : 'Send Message'}
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default NewMessagePage;

================
File: pages/ProfilePage.jsx
================
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';
import { authService } from '../services/api';

const ProfilePage = () => {
    const { currentUser, setUser } = useAuth();
    const [formData, setFormData] = useState({
        username: '',
        email: '',
        personal: '',
        github: '',
        linkedin: ''
    });
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState('');
    const [success, setSuccess] = useState('');
    const navigate = useNavigate();

    useEffect(() => {
        if (currentUser) {
            setFormData({
                username: currentUser.username || '',
                email: currentUser.email || '',
                personal: currentUser.personal || '',
                github: currentUser.github || '',
                linkedin: currentUser.linkedin || ''
            });
        }
    }, [currentUser]); // Re-run when currentUser changes

    const handleChange = (e) => {
        const { name, value } = e.target;
        setFormData(prev => ({ ...prev, [name]: value }));
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        setIsLoading(true);
        setError('');
        setSuccess('');

        try {
            // Call the actual updateProfile service
            const result = await authService.updateProfile(formData);

            if (result.success) {
                setSuccess(result.message || 'Profile updated successfully!');
                // Update the user context if backend sends back updated user data
                if (result.user) {
                    // Map backend UserResponse fields to AuthContext fields if necessary
                    // Assuming AuthContext expects { uuid, username, email, personal, github, linkedin }
                    // And UserResponse has these fields.
                    setUser(result.user);
                }
                // Optionally clear success message after a delay
                setTimeout(() => setSuccess(''), 3000);
            } else {
                setError(result.message || 'Failed to update profile');
            }

        } catch (error) {
            console.error("Profile update error:", error);
            setError(error.message || 'An unexpected error occurred');
        } finally {
            setIsLoading(false);
        }
    };

    // If currentUser is null while AuthContext is loading, show loading or placeholder
    if (!currentUser && useAuth().loading) {
        return <div className="text-center p-10">Loading profile...</div>;
    }
    if (!currentUser) {
        return <div className="text-center p-10 text-red-500">Could not load user data. Please log in again.</div>;
    }

    return (
        <div className="container mx-auto px-4 py-12">
            <div className="max-w-2xl mx-auto">
                {/* ... Back button and Title ... */}
                <div className="flex items-center mb-8">
                    <button
                        onClick={() => navigate('/dashboard')}
                        className="text-primary hover:text-white mr-4"
                    >
                        ← Back to Dashboard
                    </button>
                    <h1 className="text-2xl font-bold text-white">Edit Profile</h1>
                </div>


                <div className="card">
                    <div className="card-body">
                        {/* ... Error and Success Messages ... */}
                        {error && (
                            <div className="bg-red-900/20 border border-red-700/50 text-red-200 rounded-lg p-4 mb-6 text-sm">
                                {error}
                            </div>
                        )}
                        {success && (
                            <div className="bg-green-900/20 border border-green-700/50 text-green-200 rounded-lg p-4 mb-6 text-sm">
                                {success}
                            </div>
                        )}

                        <form onSubmit={handleSubmit}>
                            {/* Form fields using formData state */}
                            <div className="mb-6">
                                <label htmlFor="username" className="block text-sm font-medium text-gray-400 mb-2">
                                    Username
                                </label>
                                <input
                                    type="text" id="username" name="username"
                                    value={formData.username} onChange={handleChange}
                                    className="input-field" disabled={isLoading} required
                                />
                            </div>
                            <div className="mb-6">
                                <label htmlFor="email" className="block text-sm font-medium text-gray-400 mb-2">
                                    Email
                                </label>
                                <input
                                    type="email" id="email" name="email"
                                    value={formData.email} onChange={handleChange}
                                    className="input-field" disabled={isLoading} required
                                />
                            </div>
                            <div className="mb-6">
                                <label htmlFor="personal" className="block text-sm font-medium text-gray-400 mb-2">
                                    Personal Website
                                </label>
                                <input
                                    type="url" id="personal" name="personal"
                                    value={formData.personal} onChange={handleChange}
                                    className="input-field" placeholder="https://example.com" disabled={isLoading}
                                />
                            </div>
                            <div className="mb-6">
                                <label htmlFor="github" className="block text-sm font-medium text-gray-400 mb-2">
                                    GitHub Profile
                                </label>
                                <input
                                    type="url" id="github" name="github"
                                    value={formData.github} onChange={handleChange}
                                    className="input-field" placeholder="https://github.com/username" disabled={isLoading}
                                />
                            </div>
                            <div className="mb-6">
                                <label htmlFor="linkedin" className="block text-sm font-medium text-gray-400 mb-2">
                                    LinkedIn Profile
                                </label>
                                <input
                                    type="url" id="linkedin" name="linkedin"
                                    value={formData.linkedin} onChange={handleChange}
                                    className="input-field" placeholder="https://linkedin.com/in/username" disabled={isLoading}
                                />
                            </div>

                            <div className="flex justify-end">
                                <button type="submit" disabled={isLoading} className="btn-primary">
                                    {isLoading ? 'Saving...' : 'Save Changes'}
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default ProfilePage;

================
File: pages/RegisterPage.jsx
================
import React, { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { authService } from "../services/api.js";
import { useAuth } from "../contexts/AuthContext";

const RegisterPage = () => {
    // Move the useAuth hook to the component level
    const { setUser } = useAuth();
    const navigate = useNavigate();

    const [formData, setFormData] = useState({
        name: '',
        email: '',
        password: '',
        personal: '',
        github: '',
        linkedin: ''
    });

    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState('');

    const handleChange = (e) => {
        const { name, value } = e.target;
        setFormData(prev => ({ ...prev, [name]: value }));
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        setIsLoading(true);
        setError('');

        try {
            // Use the authService instead of direct fetch
            const data = await authService.register(formData);

            if (data.success) {
                // Set user data directly from response
                setUser({
                    uuid: data.uuid,
                    name: data.name,
                    email: data.email
                });
                navigate('/');
            } else {
                setError(data.message || 'Registration failed');
            }
        } catch (error) {
            console.error("Registration error:", error);
            setError(error.message || 'An error occurred. Please try again.');
        } finally {
            setIsLoading(false);
        }
    };

    const inputStyle = {
        width: '100%',
        padding: '0.75rem 1rem',
        backgroundColor: 'rgba(22, 21, 28, 0.5)',
        border: '1px solid rgba(188, 156, 255, 0.1)',
        borderRadius: '0.5rem',
        color: 'white',
        fontSize: '0.875rem',
        boxSizing: 'border-box',
        boxShadow: 'inset 0px 2px 1px -1px rgba(255, 255, 255, 0.12), inset 0px 0px 0px 1px rgba(255, 255, 255, 0.05)',
        transition: 'border-color 0.2s',
        margin: '0'
    };

    const labelStyle = {
        display: 'block',
        fontSize: '0.875rem',
        fontWeight: '500',
        color: '#9C95AC',
        marginBottom: '0.5rem'
    };

    return (
        <div style={{
            width: '100%',
            maxWidth: '100%',
            padding: '3rem 1.5rem',
            display: 'flex',
            justifyContent: 'center'
        }}>
            <div style={{
                width: '100%',
                maxWidth: '32rem'
            }}>
                <div className="card" style={{
                    boxShadow: '0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)',
                    overflow: 'hidden'
                }}>
                    <div className="card-header" style={{
                        textAlign: 'center',
                        padding: '2rem 1.5rem',
                        borderBottom: '1px solid rgba(13, 12, 16, 1)'
                    }}>
                        <h2 style={{ fontSize: '1.75rem', fontWeight: 'bold', color: 'white', margin: 0 }}>Create Account</h2>
                        <p style={{ color: '#9C95AC', marginTop: '0.5rem' }}>Join CodeNest to start sharing code snippets securely</p>
                    </div>

                    <div style={{
                        padding: '2rem',
                        borderTop: '1px solid rgba(188, 156, 255, 0.1)'
                    }}>
                        {error && (
                            <div style={{ backgroundColor: 'rgba(220, 38, 38, 0.1)', color: '#ef4444', padding: '0.75rem', borderRadius: '0.5rem', marginBottom: '1.5rem', fontSize: '0.875rem' }}>
                                {error}
                            </div>
                        )}

                        <form onSubmit={handleSubmit}>
                            <div style={{ marginBottom: '1.5rem' }}>
                                <label htmlFor="name" style={labelStyle}>
                                    Name
                                </label>
                                <input
                                    type="text"
                                    id="name"
                                    name="name"
                                    value={formData.name}
                                    onChange={handleChange}
                                    style={inputStyle}
                                    required
                                    placeholder="Your name"
                                />
                            </div>

                            <div style={{ marginBottom: '1.5rem' }}>
                                <label htmlFor="email" style={labelStyle}>
                                    Email
                                </label>
                                <input
                                    type="email"
                                    id="email"
                                    name="email"
                                    value={formData.email}
                                    onChange={handleChange}
                                    style={inputStyle}
                                    required
                                    placeholder="you@example.com"
                                />
                            </div>

                            <div style={{ marginBottom: '1.5rem' }}>
                                <label htmlFor="password" style={labelStyle}>
                                    Password
                                </label>
                                <input
                                    type="password"
                                    id="password"
                                    name="password"
                                    value={formData.password}
                                    onChange={handleChange}
                                    style={inputStyle}
                                    required
                                    placeholder="••••••••"
                                />
                            </div>

                            <div style={{ marginBottom: '1.5rem' }}>
                                <label htmlFor="personal" style={labelStyle}>
                                    Personal Website <span style={{ color: '#9C95AC', opacity: 0.7 }}>(Optional)</span>
                                </label>
                                <input
                                    type="url"
                                    id="personal"
                                    name="personal"
                                    value={formData.personal}
                                    onChange={handleChange}
                                    style={inputStyle}
                                    placeholder="https://yourwebsite.com"
                                />
                            </div>

                            <div style={{ marginBottom: '1.5rem' }}>
                                <label htmlFor="github" style={labelStyle}>
                                    GitHub Profile <span style={{ color: '#9C95AC', opacity: 0.7 }}>(Optional)</span>
                                </label>
                                <input
                                    type="url"
                                    id="github"
                                    name="github"
                                    value={formData.github}
                                    onChange={handleChange}
                                    style={inputStyle}
                                    placeholder="https://github.com/username"
                                />
                            </div>

                            <div style={{ marginBottom: '2rem' }}>
                                <label htmlFor="linkedin" style={labelStyle}>
                                    LinkedIn Profile <span style={{ color: '#9C95AC', opacity: 0.7 }}>(Optional)</span>
                                </label>
                                <input
                                    type="url"
                                    id="linkedin"
                                    name="linkedin"
                                    value={formData.linkedin}
                                    onChange={handleChange}
                                    style={inputStyle}
                                    placeholder="https://linkedin.com/in/username"
                                />
                            </div>

                            <button
                                type="submit"
                                disabled={isLoading}
                                style={{
                                    width: '100%',
                                    padding: '0.75rem',
                                    backgroundColor: '#673CE3',
                                    color: 'white',
                                    fontWeight: '600',
                                    borderRadius: '0.5rem',
                                    border: 'none',
                                    cursor: isLoading ? 'not-allowed' : 'pointer',
                                    opacity: isLoading ? 0.7 : 1,
                                    transition: 'background-color 0.2s, transform 0.1s',
                                    boxShadow: 'inset 0px 2px 1px -1px rgba(255, 255, 255, 0.12), inset 0px 0px 0px 1px rgba(255, 255, 255, 0.05)',
                                    transform: 'translateY(0)',
                                    margin: '0',
                                }}
                                onMouseDown={() => !isLoading && { transform: 'translateY(1px)' }}
                            >
                                {isLoading ? (
                                    <span style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
                                        <span style={{
                                            display: 'inline-block',
                                            width: '1rem',
                                            height: '1rem',
                                            borderRadius: '50%',
                                            borderTop: '2px solid white',
                                            borderRight: '2px solid transparent',
                                            marginRight: '0.5rem',
                                            animation: 'spin 1s linear infinite'
                                        }}></span>
                                        Creating account...
                                    </span>
                                ) : 'Create account'}
                            </button>
                        </form>

                        <p style={{ textAlign: 'center', color: '#9C95AC', marginTop: '1.5rem', fontSize: '0.875rem' }}>
                            Already have an account? <Link to="/login" style={{ color: '#673CE3', textDecoration: 'none', fontWeight: '500' }}>Sign in</Link>
                        </p>
                    </div>
                </div>
            </div>

            <style>{`
                @keyframes spin {
                  to { transform: rotate(360deg); }
                }
                
                input:focus {
                  outline: none;
                  border-color: #673CE3;
                }
            `}</style>
        </div>
    );
};

export default RegisterPage;

================
File: pages/ViewSnippetPage.jsx
================
import React, { useState, useEffect, useRef } from 'react';
import { useParams, useLocation, Link, useNavigate } from 'react-router-dom';
import hljs from 'highlight.js';
import 'highlight.js/styles/atom-one-dark.css'; // Ensure your preferred theme is imported
import { snippetService } from '../services/api';
import { useAuth } from '../contexts/AuthContext';
import {
    Container,
    Paper,
    Box,
    Typography,
    Button,
    Chip,
    Stack,
    CircularProgress,
    Alert,
    IconButton,
    TextField,
    InputAdornment,
    Tooltip,
    Divider,
    Avatar,
    Link as MuiLink, // Alias to avoid conflict with react-router Link
    useTheme
} from '@mui/material';
import {
    ContentCopy as ContentCopyIcon,
    Share as ShareIcon,
    AccessTime as AccessTimeIcon,
    Visibility as VisibilityIcon,
    ErrorOutline as ErrorOutlineIcon,
    Tag as TagIcon,
    Link as LinkIcon, // For URL field
    AccountCircle as AccountCircleIcon,
    Home as HomeIcon,
    Language as LanguageIcon, // For personal website
    GitHub as GitHubIcon,
    LinkedIn as LinkedInIcon,
    Message as MessageIcon // For messaging author
} from '@mui/icons-material';

const ViewSnippetPage = () => {
    const { isAuthenticated, currentUser } = useAuth(); // Get currentUser for author check
    const { uuid } = useParams();
    const location = useLocation();
    const navigate = useNavigate();
    const theme = useTheme();
    const codeRef = useRef(null); // Ref for the code block

    const [snippet, setSnippet] = useState(null);
    const [author, setAuthor] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [copied, setCopied] = useState(false);
    const [remainingTime, setRemainingTime] = useState(null);

    // Define consistent card styles
    const cardStyle = {
        borderRadius: 3,
        bgcolor: theme.palette.mode === 'dark' ? '#16151C' : 'background.paper',
        border: '1px solid',
        borderColor: theme.palette.mode === 'dark' ? 'rgba(188, 156, 255, 0.1)' : 'divider',
        overflow: 'hidden',
        mb: 3, // Add margin between cards
    };

    const cardHeaderStyle = {
        p: 2.5,
        borderBottom: '1px solid',
        borderColor: theme.palette.mode === 'dark' ? 'rgba(13, 12, 16, 1)' : 'divider',
        display: 'flex',
        justifyContent: 'space-between',
        alignItems: 'center',
        flexWrap: 'wrap',
        gap: 1.5, // Add gap for wrapping
    };

    // --- Fetch Snippet Data ---
    useEffect(() => {
        const fetchSnippet = async () => {
            setLoading(true);
            setError(null);
            setSnippet(null); // Reset snippet state on new fetch
            setAuthor(null);
            setRemainingTime(null);

            try {
                const searchParams = new URLSearchParams(location.search);
                const skipIncrement = searchParams.get('skipIncrement') === 'true';

                if (skipIncrement) {
                    const newUrl = window.location.pathname; // Just the path, no query params
                    window.history.replaceState({}, '', newUrl);
                }

                const data = await snippetService.getById(uuid, skipIncrement);

                if (data.snippet) {
                    setSnippet(data.snippet);
                    setAuthor(data.author);
                    if (data.snippet.expirationType === 'TIME' && data.snippet.remainingSeconds > 0) {
                        setRemainingTime(data.snippet.remainingSeconds);
                    }
                } else {
                    const errorMessage = data.message || (data.expired ? 'The code snippet has expired.' : 'Snippet not found or invalid response.');
                    throw new Error(errorMessage);
                }
            } catch (err) {
                setError(err.message);
            } finally {
                setLoading(false);
            }
        };

        fetchSnippet();
    }, [uuid, location.search]); // Rerun when UUID or search params change

    // --- Countdown Timer ---
    useEffect(() => {
        let timer;
        if (remainingTime && remainingTime > 0) {
            timer = setInterval(() => {
                setRemainingTime(prev => {
                    if (prev <= 1) {
                        clearInterval(timer);
                        setError("The snippet has expired."); // Update error state when timer finishes
                        setSnippet(null); // Clear snippet data
                        return 0;
                    }
                    return prev - 1;
                });
            }, 1000);
        }
        return () => clearInterval(timer);
    }, [remainingTime]); // Rerun only when remainingTime changes

    // --- Syntax Highlighting ---
    useEffect(() => {
        // Ensure highlighting runs only when snippet content is available and no error
        if (codeRef.current && snippet?.content && !error) {
            hljs.highlightElement(codeRef.current);
        }
    }, [snippet?.content, error]); // Depend on snippet content and error state

    // --- Helper Functions ---
    const formatTime = (seconds) => {
        if (seconds <= 0) return 'Expired';
        const hours = Math.floor(seconds / 3600);
        const minutes = Math.floor((seconds % 3600) / 60);
        const secs = Math.floor(seconds % 60);
        return [
            hours.toString().padStart(2, '0'),
            minutes.toString().padStart(2, '0'),
            secs.toString().padStart(2, '0')
        ].join(':');
    };

    const handleCopyCode = () => {
        if (snippet?.content) {
            navigator.clipboard.writeText(snippet.content)
                .then(() => {
                    setCopied(true);
                    setTimeout(() => setCopied(false), 2000);
                })
                .catch(err => console.error("Failed to copy code:", err));
        }
    };

    const handleShareViaMessage = () => {
        if (snippet) {
            navigate('/messages/new', {
                state: {
                    snippet: {
                        uuid: snippet.uuid,
                        title: snippet.title || 'Untitled Snippet'
                    }
                }
            });
        }
    };

    // --- Render Logic ---

    if (loading) {
        return (
            <Box display="flex" justifyContent="center" alignItems="center" minHeight="60vh">
                <CircularProgress size={40} sx={{ color: theme.palette.primary.main }} />
            </Box>
        );
    }

    if (error) {
        return (
            <Container maxWidth="sm" sx={{ py: 6, textAlign: 'center' }}>
                <Paper sx={{ ...cardStyle, p: 4 }}>
                    <ErrorOutlineIcon sx={{ fontSize: 48, color: 'error.main', mb: 2 }} />
                    <Typography variant="h5" fontWeight="bold" gutterBottom>
                        {error.includes("expired") ? "Snippet Expired" : "Snippet Not Available"}
                    </Typography>
                    <Typography color="text.secondary" sx={{ mb: 3 }}>
                        {error}
                    </Typography>
                    <Button
                        variant="contained"
                        component={Link}
                        to="/"
                        startIcon={<HomeIcon />}
                        sx={{
                            bgcolor: theme.palette.mode === 'dark' ? '#673CE3' : 'primary.main',
                            '&:hover': { bgcolor: theme.palette.mode === 'dark' ? '#774BF3' : 'primary.dark' }
                        }}
                    >
                        Return Home
                    </Button>
                </Paper>
            </Container>
        );
    }

    if (!snippet) {
        // Fallback if somehow loading finished but snippet is null without error
        return <Alert severity="warning" sx={{ m: 3 }}>Snippet data could not be loaded.</Alert>;
    }

    // --- Main Snippet View ---
    return (
        <Container maxWidth="lg" sx={{ py: 4, px: { xs: 2, sm: 3 }, zIndex: 5, position: 'relative' }}>
            {/* Snippet Card */}
            <Paper elevation={0} sx={cardStyle}>
                <Box sx={cardHeaderStyle}>
                    {/* Left Side: Title */}
                    <Typography variant="h5" fontWeight="bold" sx={{ mr: 'auto' }}>
                        {snippet.title || 'Untitled Snippet'}
                    </Typography>

                    {/* Right Side: Metadata Chips */}
                    <Stack direction="row" spacing={1} flexWrap="wrap" justifyContent="flex-end" useFlexGap>
                        <Chip
                            label={`Created: ${snippet.createdAt || 'N/A'}`}
                            size="small"
                            variant="outlined"
                            sx={{ borderColor: 'rgba(255, 255, 255, 0.1)', color: 'text.secondary' }}
                        />
                        {snippet.expirationType === 'VIEWS' && snippet.expirationValue > 0 && (
                            <Chip
                                icon={<VisibilityIcon fontSize="small" />}
                                label={`Views: ${snippet.viewCount} / ${snippet.expirationValue}`}
                                size="small"
                                variant="outlined"
                                color="info" // Use theme colors
                                sx={{ borderColor: 'rgba(255, 255, 255, 0.1)' }}
                            />
                        )}
                        {snippet.expirationType === 'TIME' && snippet.expirationValue > 0 && remainingTime != null && (
                            <Chip
                                icon={<AccessTimeIcon fontSize="small" />}
                                label={`Expires in: ${formatTime(remainingTime)}`}
                                size="small"
                                variant="outlined"
                                color="warning" // Use theme colors
                                sx={{ borderColor: 'rgba(255, 255, 255, 0.1)' }}
                            />
                        )}
                    </Stack>
                </Box>

                <Box p={3}>
                    {/* Code Block with Copy Button */}
                    <Box sx={{ position: 'relative', mb: 3 }}>
                        <Paper elevation={0} sx={{ bgcolor: '#282c34', borderRadius: 1.5, overflow: 'hidden' }}>
                            <pre style={{ margin: 0, padding: '1rem', overflowX: 'auto' }}>
                                <code ref={codeRef} className={`language-${hljs.highlightAuto(snippet.content).language || 'plaintext'}`}>
                                    {snippet.content}
                                </code>
                            </pre>
                        </Paper>
                        <Tooltip title={copied ? "Copied!" : "Copy Code"} placement="top">
                            <IconButton
                                onClick={handleCopyCode}
                                size="small"
                                sx={{
                                    position: 'absolute',
                                    top: 8,
                                    right: 8,
                                    bgcolor: 'rgba(255, 255, 255, 0.1)',
                                    color: 'white',
                                    '&:hover': { bgcolor: 'rgba(255, 255, 255, 0.2)' }
                                }}
                            >
                                <ContentCopyIcon fontSize="small" />
                            </IconButton>
                        </Tooltip>
                    </Box>

                    {/* Tags Display */}
                    {snippet.tags && snippet.tags.length > 0 && (
                        <Stack direction="row" spacing={1} flexWrap="wrap" useFlexGap sx={{ mb: 3 }}>
                            <Chip
                                icon={<TagIcon fontSize='small' />}
                                label="Tags:"
                                size="small"
                                sx={{ bgcolor: 'transparent', color: 'text.secondary', fontWeight: 500 }}
                            />
                            {snippet.tags.map(tag => (
                                <Chip
                                    key={tag}
                                    label={tag}
                                    size="small"
                                    sx={{
                                        bgcolor: theme.palette.mode === 'dark' ? 'rgba(22, 21, 28, 0.7)' : 'rgba(0, 0, 0, 0.08)',
                                        color: theme.palette.mode === 'dark' ? '#9C95AC' : 'text.secondary',
                                        cursor: 'pointer', // Optional: Make tags clickable for filtering later
                                        '&:hover': { bgcolor: theme.palette.mode === 'dark' ? 'rgba(45, 42, 61, 0.7)' : 'rgba(0, 0, 0, 0.1)' }
                                    }}
                                />
                            ))}
                        </Stack>
                    )}

                    <Divider sx={{ mb: 3, borderColor: 'rgba(188, 156, 255, 0.1)' }} />

                    {/* Action Buttons & URL */}
                    <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2} justifyContent="space-between" alignItems="center">
                        {/* Share Button */}
                        {isAuthenticated && (
                            <Button
                                variant="outlined"
                                startIcon={<ShareIcon />}
                                onClick={handleShareViaMessage}
                                sx={{
                                    borderColor: theme.palette.mode === 'dark' ? 'rgba(188, 156, 255, 0.2)' : 'divider',
                                    color: theme.palette.mode === 'dark' ? '#9C95AC' : 'text.secondary',
                                    '&:hover': {
                                        borderColor: theme.palette.mode === 'dark' ? 'rgba(188, 156, 255, 0.3)' : 'primary.main',
                                        bgcolor: 'rgba(188, 156, 255, 0.05)'
                                    }
                                }}
                            >
                                Share via Message
                            </Button>
                        )}

                        {/* Read-only URL Input */}
                        <TextField
                            value={`${window.location.origin}/code/${snippet.uuid}`}
                            readOnly
                            size="small"
                            fullWidth={!isAuthenticated} // Take more width if share button isn't there
                            sx={{
                                '& .MuiOutlinedInput-root': {
                                    bgcolor: theme.palette.mode === 'dark' ? 'rgba(13, 13, 17, 0.3)' : 'rgba(0, 0, 0, 0.02)',
                                    color: 'text.secondary',
                                },
                                '& .MuiOutlinedInput-input': {
                                    cursor: 'pointer',
                                    fontSize: '0.85rem'
                                },
                                maxWidth: { sm: isAuthenticated ? '400px' : '100%' } // Limit width on larger screens if needed
                            }}
                            onClick={(e) => e.target.select()}
                            InputProps={{
                                startAdornment: (
                                    <InputAdornment position="start">
                                        <LinkIcon fontSize="small" color="action" />
                                    </InputAdornment>
                                )
                            }}
                        />
                    </Stack>
                </Box>
            </Paper>

            {/* Author Card */}
            {author && author.username !== 'Unknown' && (
                <Paper elevation={0} sx={cardStyle}>
                    <Box sx={cardHeaderStyle}>
                        <AccountCircleIcon sx={{ color: theme.palette.primary.main }} />
                        <Typography variant="h6" fontWeight="bold">
                            About the Author
                        </Typography>
                        <Typography variant="body1" sx={{ ml: 'auto', color: 'text.secondary' }}>
                            {author.username}
                        </Typography>
                    </Box>
                    <Box p={3}>
                        <Stack direction="row" spacing={1.5} flexWrap="wrap" useFlexGap>
                            {author.personal && (
                                <Button size="small" variant="outlined" startIcon={<LanguageIcon />} href={author.personal} target="_blank" rel="noopener noreferrer" sx={{ color: 'text.secondary', borderColor: 'rgba(255, 255, 255, 0.1)' }}>
                                    Website
                                </Button>
                            )}
                            {author.github && (
                                <Button size="small" variant="outlined" startIcon={<GitHubIcon />} href={author.github} target="_blank" rel="noopener noreferrer" sx={{ color: 'text.secondary', borderColor: 'rgba(255, 255, 255, 0.1)' }}>
                                    GitHub
                                </Button>
                            )}
                            {author.linkedin && (
                                <Button size="small" variant="outlined" startIcon={<LinkedInIcon />} href={author.linkedin} target="_blank" rel="noopener noreferrer" sx={{ color: 'text.secondary', borderColor: 'rgba(255, 255, 255, 0.1)' }}>
                                    LinkedIn
                                </Button>
                            )}
                            {isAuthenticated && author.uuid !== currentUser?.uuid && (
                                <Button
                                    size="small"
                                    variant="outlined"
                                    startIcon={<MessageIcon />}
                                    onClick={() => navigate(`/messages/new`, { state: { recipientEmail: author.email } })}
                                    sx={{ color: 'text.secondary', borderColor: 'rgba(255, 255, 255, 0.1)' }}
                                >
                                    Message {author.username}
                                </Button>
                            )}
                        </Stack>
                    </Box>
                </Paper>
            )}
        </Container>
    );
};

export default ViewSnippetPage;

================
File: services/api.js
================
// Base API handling
const API_URL = '/api';

// Helper for handling API responses
const handleResponse = async (response) => {
    if (!response.ok) {
        const errorText = await response.text().catch(() => 'Unknown error');

        try {
            const errorJson = JSON.parse(errorText);
            throw new Error(errorJson.message || 'API request failed');
        } catch (e) {
            throw new Error(errorText || 'API request failed');
        }
    }

    return response.json();
};

// Snippet operations
export const snippetService = {
    getSnippetUuidById: async (numericId) => {
        try {
            const response = await fetch(`${API_URL}/debug/snippet/${numericId}`, {
                credentials: 'include'
            });

            if (!response.ok) {
                return null;
            }

            const data = await response.json();
            return data.uuid; // Extract the UUID from the response
        } catch (error) {
            console.error('Error fetching snippet UUID:', error);
            return null;
        }
    },

    getUserSnippets: async () => { // Added function
        const response = await fetch(`${API_URL}/user/snippets`, {
            credentials: 'include' // Necessary to identify the user
        });
        return handleResponse(response);
    },

    getLatest: async () => {
        const response = await fetch(`${API_URL}/code/latest`);
        return handleResponse(response);
    },

    getById: async (uuid, skipIncrement = false) => {
        // Add a query parameter to skip incrementing the view count if needed
        const url = skipIncrement
            ? `${API_URL}/code/${uuid}?skipIncrement=true`
            : `${API_URL}/code/${uuid}`;

        const response = await fetch(url, {
            credentials: 'include'
        });

        return handleResponse(response);
    },

    create: async (snippetData) => {
        // Map frontend state (timeLimit in minutes) to backend expectation
        let expirationType = null;
        let expirationValue = 0;
        const timeLimitSeconds = (Number(snippetData.timeLimit) || 0) * 60;
        const viewLimit = Number(snippetData.viewLimit) || 0;

        if (timeLimitSeconds > 0) {
            expirationType = "TIME";
            expirationValue = timeLimitSeconds;
        } else if (viewLimit > 0) {
            expirationType = "VIEWS";
            expirationValue = viewLimit;
        }
        // If both are 0, type remains null, value remains 0 (no expiration)

        const payload = {
            title: snippetData.title || "Untitled Snippet",
            content: snippetData.content || snippetData.code,
            expirationType: snippetData.expirationType,
            expirationValue: snippetData.expirationValue,
            tags: snippetData.tags || [] // Ensure tags are included
        };

        console.log('API service sending payload:', payload); // Debug log

        const response = await fetch(`${API_URL}/code/new`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(payload),
            credentials: 'include' // Ensure cookie is sent
        });

        return handleResponse(response);
    }
};

// Authentication operations
export const authService = {
    login: async (credentials) => {
        const response = await fetch(`${API_URL}/login`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(credentials),
            credentials: 'include'
        });

        return handleResponse(response);
    },

    register: async (userData) => {
        const response = await fetch(`${API_URL}/register`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(userData),
            credentials: 'include'
        });

        return handleResponse(response);
    },

    logout: async () => {
        const response = await fetch(`${API_URL}/logout`, {
            method: 'POST',
            credentials: 'include'
        });

        if (!response.ok) {
            return false;
        }

        return true;
    },

    updateProfile: async (profileData) => { // Added function
        const response = await fetch(`${API_URL}/user/profile`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(profileData),
            credentials: 'include' // Send cookie for authentication
        });
        return handleResponse(response); // Assumes backend returns { success: boolean, message?: string, user?: UserResponse }
    },

    getCurrentUser: async () => {
        const response = await fetch(`${API_URL}/auth/me`, {
            credentials: 'include'
        });

        if (!response.ok) {
            return null;
        }

        return response.json();
    }
};

export const groupService = {
    getMyGroups: async () => {
        const response = await fetch(`${API_URL}/groups/my`, {
            credentials: 'include'
        });
        return handleResponse(response);
    },

    getGroupDetails: async (groupId) => {
        const response = await fetch(`${API_URL}/groups/${groupId}/members`, {
            credentials: 'include'
        });
        return handleResponse(response);
    },

    createGroup: async (groupData) => {
        const response = await fetch(`${API_URL}/groups`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(groupData),
            credentials: 'include'
        });
        return handleResponse(response);
    },

    addMember: async (groupId, email) => { // Changed parameter from userId to email
        const response = await fetch(`${API_URL}/groups/${groupId}/members`, { // Removed userId from URL
            method: 'POST',
            headers: { // Added headers
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ email: email }), // Added body with email
            credentials: 'include'
        });
        return handleResponse(response);
    },

    removeMember: async (groupId, userId) => {
        const response = await fetch(`${API_URL}/groups/${groupId}/members/${userId}`, {
            method: 'DELETE',
            credentials: 'include'
        });
        return handleResponse(response);
    }
};

export const messageService = {
    getInbox: async () => {
        const response = await fetch(`${API_URL}/messages/inbox`, {
            credentials: 'include'
        });
        return handleResponse(response);
    },

    getSent: async () => {
        const response = await fetch(`${API_URL}/messages/sent`, {
            credentials: 'include'
        });
        return handleResponse(response);
    },

    getConversation: async (userId) => {
        const response = await fetch(`${API_URL}/messages/conversation/${userId}`, {
            credentials: 'include'
        });
        return handleResponse(response);
    },

    sendMessage: async (messageData) => {
        const response = await fetch(`${API_URL}/messages`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(messageData),
            credentials: 'include'
        });
        return handleResponse(response);
    },

    processConversationMessages: async (messages) => {
        // Process any messages that have snippets to replace IDs with UUIDs
        const processedMessages = [...messages]; // Make a copy

        for (let i = 0; i < processedMessages.length; i++) {
            const message = processedMessages[i];
            if (message.snipId) {
                try {
                    // Try to get the UUID for this snippet ID
                    const uuid = await snippetService.getSnippetUuidById(message.snipId);
                    if (uuid) {
                        // Add a new property for the UUID while preserving the original ID
                        message.snipUuid = uuid;
                    }
                } catch (err) {
                    console.error(`Failed to get UUID for snippet ID ${message.snipId}:`, err);
                }
            }
        }

        return processedMessages;
    },

    getGroupSnippets: async (groupId) => {
        const response = await fetch(`${API_URL}/groups/${groupId}/snippets`, {
            credentials: 'include'
        });
        return handleResponse(response);
    },

    // Share a snippet with a group
    shareSnippet: async (groupId, snippetId) => {
        const response = await fetch(`${API_URL}/groups/${groupId}/snippets`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ snippetId: snippetId }),
            credentials: 'include'
        });
        return handleResponse(response);
    }


};

================
File: vite-env.d.ts
================
/// <reference types="vite/client" />



================================================================
End of Codebase
================================================================
